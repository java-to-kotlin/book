[[builders-to-data-classes]]
== Builders to Data Classes

After a decade of flirting with mutable state, Java began to see the advantages of immutable data.
The base language didn't, and still doesn't, provide good facilities for expressing data, and so we adopted the Builder pattern to easy the pain, only to find it causes other problems.
How do data classes cure the disease rather than ease the symptoms?

In <<beans-to-values>> we examined reasons to prefer immutable values to mutable bean-style classes, and how to manage updates by replacing values rather than changing their properties.
As the Java community began to adopt these techniques, it found some problems.
Say we want to manage individual fields of an address value:

// begin-insert: src/main/java/builders/Address.java#excerpt
[source,java]
----
public class Address {
    private final String line1;
    private final String line2;
    private final String townOrCity;
    private final String region;
    private final String postalCode;
    private final String countryCode;

    public Address(
        String line1,
        String line2,
        String townOrCity,
        String region,
        String postalCode,
        String countryCode
    ) {
        this.line1 = line1;
        this.line2 = line2;
        this.townOrCity = townOrCity;
        this.region = region;
        this.postalCode = postalCode;
        this.countryCode = countryCode;
    }
    ... getters, equals, hashCode

    public Address withPostalCode(String newValue) {
        return new Address(
            getLine1(),
            getLine2(),
            getTownOrCity(),
            getRegion(),
            newValue,
            getCountryCode()
        );
    }
}
----
// end-insert

If we want to create an `Address` with a revised `postalCode`, we need code something like:

// begin-insert: src/main/java/builders/Address.java#withPostalCode
[source,java]
----
public Address withPostalCode(String newValue) {
    return new Address(
        getLine1(),
        getLine2(),
        getTownOrCity(),
        getRegion(),
        newValue,
        getCountryCode()
    );
}
----
// end-insert

Having a method like this for each of 6 fields is tedious and error prone - a phrase your authors use quite a bit when writing Java!

=== Builders To The Rescue

==== Providing Defaults

==== Copying Existing Values

==== Test Data Builders

=== The Problem With Builders

=== Data Classes

=== Deep Mutations

Something on extension methods like Customer.withPostcode() in lieu of lenses.

=== Refactoring Builders to Data Classes

Can we show an example starting from Immutables definitions and generating code?

Maybe for an itinerary printout.

=== Moving On

