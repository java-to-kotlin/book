[[code-to-data]]
== Code to Data

WIP

The advantages of data over code

=== Values

Values are immutable data.
You know code that represents data when you it when you see it.
While that sounds like a cop-out, it's the key attribute - you can interpret data without executing code.

[source,kotlin]
----
val data = mapOf(
    "givenName" to "Fred",
    "familyName" to "Flintstone"
)
----

or

[source,kotlin]
----
val customer = Customer(
    givenName = "Fred",
    familyName = "Flintstone"
)
----

or

[source,json]
----
{
    "givenName" : "Fred",
    "familyName" : "Flintstone"
}
----

are all meaningful without being run by some computer.
The JSON form even manages to be meaningful between different systems, written in different languages, even when the system that wrote it was decommissioned before the system that read it was conceived, and even when one of those systems is a human.

It is this simplicity of interpretation that makes data so useful.
To make it even more useful, we further constrain data to be immutable.
Otherwise we don't just have data, we have data as it is at a particular time, and that isn't simple at all.
A value is an unchanging piece of data.

CF code

Values, well they just are.
Simply accessing immutable data takes even less reasoning than calculations.
We don't have to drill down through source code, or write tests, to determine their behavior.
Calculations can fail for various reasons, but the main error that we have to consider with data is what to do in its absence, and, at least in the case of Kotlin, we have language support for that.
The more code we can move into the values category the simpler our life will be.

Returning data
