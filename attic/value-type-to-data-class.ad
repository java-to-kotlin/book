[[value-type-to-data-class]]
== Value Type to Data Class

Compared to Java, Kotlin makes it easier to define value types and transform values.
As a result, your authors find they define new value classes more frequently in Kotlin than in Java.
Kotlin makes it practical to define the core application domain model entirely as immutable values and functions that act upon them, and cheap to define "throwaway" value classes to hold the intermediate results of calculation pipelines, or to pivot data into shapes that make it easier to write application logic.

=== A Value Class Grouping Related Data

Our users want to know what their trip will cost.
We show costs in the local currencies of the countries they are travelling through, and convert those costs to the user's currency to give them an idea of the total cost of the entire trip.

Here is the Java value type in our application that represents the result of a currency conversion.

// begin-insert: tags/value_types.0:src/main/java/travelator/money/CurrencyConversion.java
[source,java]
----
public class CurrencyConversion {
    private final Money fromMoney; // <1>
    private final Money toMoney;

    // <2>
    public CurrencyConversion(Money fromMoney, Money toMoney) {
        this.fromMoney = fromMoney;
        this.toMoney = toMoney;
    }

    public Money getFromMoney() { // <3>
        return fromMoney;
    }

    public Money getToMoney() { // <3>
        return toMoney;
    }

    @Override
    public boolean equals(Object o) { // <4>
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CurrencyConversion that = (CurrencyConversion) o;
        return fromMoney.equals(that.fromMoney) &&
            toMoney.equals(that.toMoney);
    }

    @Override
    public int hashCode() { // <4>
        return Objects.hash(fromMoney, toMoney);
    }

    @Override
    public String toString() { // <5>
        return "CurrencyConversion{" +
            "fromMoney=" + fromMoney +
            ", toMoney=" + toMoney +
            '}';
    }
}
----
// end-insert

This class is very simple -- it does nothing more than group related data and provides no operations of its own.
Even so, the class involves a lot of boilerplate code:

<1> Values are immutable, so the class declares its fields as final.
<2> It must define a constructor to initialise those fields
<3> Although the class is not a Java Bean, because it is not serializable and doesn't have a zero-argument constructor, the accessor methods of its properties follow the Java Bean naming conventions.
<4> The class implements the equals and hashCode methods to ensure that two CurrencyConversion values with equal fields compare as equal.
There is quite a lot of code to make that happen, but happily our IDE generated it for us.
However, we have to remember to delete and regenerate those methods when we change the fields of the class to avoid confusing bugs.
<5> It returns a textual representation of itself from the toString method.

We come from the school of Java that assumes that everything we pass, store or return is not null unless explicitly indicated otherwise.
You can't _see_ that, but it's why there are no `@Nullable` annotations or null checks of parameters.

Let's see what this looks like after IntelliJ has translated it to Kotlin.

// begin-insert: tags/value_types.2:src/main/java/travelator/money/CurrencyConversion.kt
[source,kotlin]
----
class CurrencyConversion(val fromMoney: Money, val toMoney: Money) {

    override fun equals(o: Any?): Boolean {
        if (this === o) return true
        if (o == null || javaClass != o.javaClass) return false
        val that = o as CurrencyConversion
        return fromMoney == that.fromMoney && toMoney == that.toMoney
    }

    override fun hashCode(): Int {
        return Objects.hash(fromMoney, toMoney)
    }

    override fun toString(): String {
        return "CurrencyConversion{" +
            "fromMoney=" + fromMoney +
            ", toMoney=" + toMoney +
            '}'
    }
}
----
// end-insert

The Kotlin class is noticeably more succinct because it declares its properties in the primary constructor.
Those declarations stand in for all this Java:

// begin-insert: tags/value_types.1:src/main/java/travelator/money/CurrencyConversion.java#replaced_by_primary_constructor
[source,java]
----
private final Money fromMoney;
private final Money toMoney;

public CurrencyConversion(Money fromMoney, Money toMoney) {
    this.fromMoney = fromMoney;
    this.toMoney = toMoney;
}

public Money getFromMoney() {
    return fromMoney;
}

public Money getToMoney() {
    return toMoney;
}
----
// end-insert

The primary constructor syntax is convenient, but it does interfere with the "scannability" of the class.
Java classes that follow the standard coding conventions always define their elements in the same order: class name, superclass, interfaces, then within the class body, fields, constructors, and methods.
This makes it easy to skim-read the class and quickly locate the features you're interested in.
It's not quite so easy in Kotlin: a class definition is organised thus: class name, primary constructor (which can contain parameters and/or property definitions), superclass (which may also be the call to the superclass' constructor), interfaces, then within the class body, more properties, more constructors, methods, and companion objects (we'll come to those later).
Coming from Java, I definitely found it harder to read classes at first, and although I got used to it eventually, I still find it hard at times to neatly format classes that have a primary constructor, a superclass, several interfaces, and properties that are defined outside the primary constructor.
I'll happily diverge from the standard Kotlin coding conventions to add more blank lines between the primary constructor and the rest of the class definition if it makes it easier to distinguish different elements of the class.

So far converting our value type to Kotlin has saved us 12 lines of code, but we aren't done yet.
Value types like this are so useful but so tedious to get right and keep right that Kotlin supports them at a language level.
Mark the class with the `data` modifier and the compiler will generate `equals`, `hashCode` and `toString` methods automatically, if they are not defined by the class.
That reduces the CurrencyConversion class to:

// begin-insert: tags/value_types.3:src/main/java/travelator/money/CurrencyConversion.kt
[source,kotlin]
----
data class CurrencyConversion(
    val fromMoney: Money,
    val toMoney: Money)
----
// end-insert

That's much more succinct than the Java.
More importantly, our CurrencyConversion class is now defined entirely by its properties.
When we add properties in the future we won't have to remember to update the generated methods or find ourselves with hard-to-diagnose bugs.

We have JUnit tests for the value semantics of our CurrencyConversion class.
We could convert these tests to Kotlin, but as we now have no logic of our own in the CurrencyConversion class, we have no need for the tests and instead can delete the entire test class.
We have reduced the entire Money class and its tests to a single Kotlin declaration.

Now that we have so little code, smaller syntactic differences between Java and Kotlin stand out.
For example, there are no visibility modifiers.
The default visibility in Kotlin is public, so `public class CurrencyConversion` in Java has been translated to just `class CurrencyConversion` in Kotlin.
Being used to Java programming style, as we were, you may question this language design decision.
Our experience working with Kotlin is that public by default works well with a design philosophy oriented around the transformation of data, where there is less need to hide and encapsulate mutable state.
It's another example of Kotlin's grain nudging the design in a different direction from Java:
modelling with objects that encapsulate mutable state needs more work than modelling with immutable values.

We also use the CurrencyConversion class elsewhere in _Travelator_.
For example, the ExchangeRates type returns CurrencyConversion values from a currency exchange calculation:

// begin-insert: tags/value_types.3:src/main/java/travelator/money/ExchangeRates.java
[source,java]
----
public interface ExchangeRates {
    BigDecimal rate(Currency fromCurrency, Currency toCurrency);

    default CurrencyConversion convert(Money fromMoney, Currency toCurrency) {
        BigDecimal rate = rate(fromMoney.getCurrency(), toCurrency);
        BigDecimal toAmount = fromMoney.getAmount().multiply(rate);
        Money toMoney = Money.of(toAmount, toCurrency);
        
        return new CurrencyConversion(fromMoney, toMoney);
    }
}
----
// end-insert: tags/value_types.3:src/main/java/travelator/money/ExchangeRates.java

And the CostSummary class stores a list of CurrencyConversions representing costs in local and the user's currencies, and calculates the total amount in the user's currency:

// begin-insert: tags/value_types.3:src/main/java/travelator/itinerary/CostSummary.java#use_of_currency_conversion
[source,java]
----
public class CostSummary {
    private final List<CurrencyConversion> lines = new ArrayList<>();
    private Money total;

    public CostSummary(Currency userCurrency) {
        this.total = Money.of(0, userCurrency);
    }

    public void addLine(CurrencyConversion line) {
        lines.add(line);
        total = total.add(line.getToMoney());
    }

    public List<CurrencyConversion> getLines() {
        return List.copyOf(lines);
    }

    public Money getTotal() {
        return total;
    }
}
----
// end-insert

Due to the excellent interoperation between Kotlin and Java, these continue to work with the converted class.
Our Java CurrencyConversion class had explicit "getter" methods.
These do not appear in the converted Kotlin source, but our Java can still call them.
The Kotlin compiler is not only generating the `equals` and `hashCode` methods we knew about, but also  `getFromMoney` and `getToMoney` -- `fromMoney` and `toMoney` are not fields in Kotlin, they are properties.
Where Java code calls the `line.getToMoney()` method, Kotlin code accesses the property `line.toMoney`.
In actual fact Kotlin will call the `getToMoney()` method that it has generated (or one supplied by a Java class) rather than accessing a field directly - so nothing has really changed except that we can drop the `get` and `()`.
We'll have more to say about properties later, but for now if you think of them as a private field with a public getter (and if a `var` property, a public setter), you won't often be wrong.


=== Conclusion

Because they require no boilerplate, it is much easier to define new value types in Kotlin than in Java.
Your authors find they introduce new value classes far more frequently in Kotlin than in Java --
to declare application-specific "micro-types" that wrap primitive values, to hold intermediate results of a calculation pipeline, or to pivot data into temporary structures that make it easier to write application logic.

Data classes greatly reduce the amount of boilerplate we need to implement value semantics.
However, the limitations of data classes mean they are only applicable to values that, like CurrencyConversion, do not maintain invariants between their properties.

A CurrencyConversion holds two related data items that we want keep together and show to the user, but it has no operations of its own.
Our application performs calculations with the properties of a CurrencyConversion individually rather than treating the CurrencyConversion value as an atomic whole.
This is not the normal case.

We look at a value type that maintains invariants between its properties and provides its own operations in <<methods-to-operators>>.

Kotlin's nudges towards immutability go much further than the ease with which we can define value types.
The standard library also makes it easy to program by transforming values in bulk.
We'll look at that in <<encapsulated-collections-to-typealiases>>.

