= To make a retrospective changes

== Fixing up a thing

In the code repo

* For safety, tag the tip of the branch you want to modify to preserve it.
  E.g.  "git tag <my-branch>-preserved <my-branch>"
* Create a "fixing" branch from the commit you want to modify.
  E.g. "git branch <my-branch>-fixing <commit-or-tag>"
* Make your changes and commit them onto the fixing branch, prefixing the commit message with the same tag name as the commit you want to change.
* Check out the branch you want to fix.
* In IntelliJ's Git log panel, select the fixing branch and invoke "Rebase Current onto Selected" via the context menu
  - IntelliJ will run an interactive rebase to let you merge your changes into commits forward in the history.
  - If you are adding callouts or snippet tags that **only** apply to the version you're changing.  In that case, in the first dialog, accept all the changes from the left and discard changes from the right.  That will complete the rebase.
* Rerun the retag-worked-example script.  Double check that the tags are pointing at the right commits
* Test that the entire history of the worked example is still valid: run the ./test-worked-example script.
* Rerun the book build and check everything looks OK
* Delete the fixup branch so that the retagging script doesn't get confused. (Don't worry! if anything goes wrong we can recreate it from the tag we created in the first step).
  E.g. git branch -d <my-branch>-fixing
* Force push the rebased branch to origin (git push --force)
* Delete the <my-branch>-fixing branch
* When you feel confident that everything is working tickety-boo, delete the <my-branch>-preserved tag.


== To create a new completely empty branch

`git checkout --orphan <new-branch-name>`

== To create an empty commit

`git commit --allow-empty -m "message"`

== To delete all tags

`git tag | xargs git tag -d`

== Show messages

`git log --pretty=oneline`

== Add a tag

`git tag -a r0 db7f85433a3594db8c7c13cdba31831abf2d94cd -m "Initial commit of Java code"`

== Move all tags

`git tag | xargs git tag -d`

`git log --pretty=oneline`

Edit output into eg

```
git tag -a r6 b541a2d5d6724e3fe14b93eb058e26496f4de648 -m "Convert PresenterTests to Kotlin"
git tag -a r5 e0ed490f7a52ac6b8cb5947a004f403c5e8e96ad -m "Convert Presenter to data class"
git tag -a r4 9d484848850fe241585a3ae57e8a7c497c0c3a0d -m "Convert Presenter to Kotlin"
git tag -a r3 9265cddaab4462d411177cd8c83c91044ff86614 -m "Remove HelloWorld.kt"
git tag -a r2 088ef3fe240332d601ae1fe45e2751eb1ff46527 -m "Add HelloWorld.kt"
git tag -a r1 fb6f4d9ce9df5d959722f96676e49104a42238f1 -m "Kotlin in build.gradle"
git tag -a r0 db7f85433a3594db8c7c13cdba31831abf2d94cd -m "Initial commit of Java code"
```






