# Notes of Chat 21 Jan 2021

This is turning into a book of things in the medium scale.
Not language features, but the way they are put together.
Implementation patterns maybe.

Grander designs need this foundation, and it is definitely a place where the languages differ, and plays well to the grain concept.

So we're not unhappy at the level that this has settled at.
Sweat the small stuff.

## Current Chapters

Looking at the content we have

### 01-intro.ad

Will need revisions but OK for now.
Should add stuff about the motivation and level of treatment.

### 02-java-to-kotlin-projects.ad

Irritating, will date, but good content on how to go about gradual conversion.

TODO - add something about /kotlin and /java

### 03-java-to-kotlin-classes.ad

Good

### 04-beans-to-values.ad

Good

### 05-java-to-kotlin-collections.ad

Good

TODO - add something about Kotlin collections builders

### 06-optional-to-nullable.ad

Good

### 07-static-methods-to-top-level-functions.ad

Good

### 08-multi-to-single-expression-functions.ad

Good

### 09-functions-to-extension-functions.ad

Good

### 10-methods-to-properties.ad

Maybe unnecessary, content could be distributed?

### 11-accumulating-objects-to-transformations.ad

Something about side-effects - might be a better title?

### 12-encapsulated-collections-to-typealiases.ad

Still haven't revisited after Java to Kotlin Collections was written.

TODO - add something about why we don't find ourselves implementing List<T>

### 13-exceptions-to-errors.ad

Needs reworking, also to be after sealed classes material.

### 14-actions-to-calculations.ad

Needs revision, move up the book so we can stop calling forward to it.
Maybe after collections chapter, as we have banged on about immutability in beans and collections, and this would pull that together.

### 15 open-to-sealed-classes.ad

Could be earlier, at least before Exceptions to Errors

### 16 immediate-to-gradual-translation.ad

Title doesn't fit, useful content but how to make it conform?

### 17 streams-to-sequences.ad

OK probably

### 18 partial-to-total-functions.ad

Part done

### 19 classes-to-closures.ad

Some of this is useful, but maybe next-level?
Distribute some of the interop content?

### 20 bonus-refactoring.ad

Could be moving IO to the edge - Performing IO to Passing Data?

### 21 bonus-error-handling.ad

Can we frame this as something to something?

### 22 kotlin-from-scratch.ad

This could be Classes to Data?

### 23 code-to-data.ad

Not much here, do we want it?

### 24 explaining-variables-to-extension-functions.ad

Good topic, no content.

### 25 duplicative-methods-to-strategy-parameters.ad

Good topic, maybe next book.

### 26 state-invariants-to-calculations.ad

Good topic, maybe less Kotlin specific.

### 27 builders-to-constants.ad

This should probably make the cut.

### 28 methods-to-extension-functions.ad

Good topic, pretty advanced, next book.

### lazy-properties-to-lazy-sequences.ad

Meh

### 29 propagating-to-translating-errors.ad

Good topic, maybe next book.

### 30 validation-to-parsing.ad

Good topic, maybe next book.

### hierarchy-to-flat-data.ad

Good topic, maybe next book.

## New Content

With a focus on the fundamentals, we realise that there are some topics that we don't cover, and should.

### Subclasses to Composition

Kotlin is closed by default, we tend to vary behavior not by introducing subclasses, but by parameterising the base class with functions that it calls.

Lots of good grain material

### Interfaces to Functions

Using function types to represent collaborators.
Some of this material is in Classes to Closures.

Refactoring could show changing dependency on EmailSystem to (Email) -> Unit, and hence getting rid of mocking in favour of just a function in the test.

### Functions to Interfaces

Interfaces as groupings of related functions.
Maybe this is next book?