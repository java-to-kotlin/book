= Introductions

== Who do we think we are?

TBD

== Who do we think _you_ are?

We're writing this book for people who were in the same situation as us back when we first adopted Kotlin.
Hopefully you can learn from our mistakes, and from our successes.

We expect you're an experienced programmer.
You know Java and the Java ecosystem well.
You may know a number of other languages.
You've learned the basics of Kotlin, and you recognise Kotlin has a different "grain" than Java.
Some approaches to design that are cumbersome in Java are much easier to apply in Kotlin.
Conversely, Kotlin deliberately removes some features of Java (e.g. checked exceptions) and deemphasises others (e.g. reflection).
You don't want to end up merely writing Java code in Kotlin syntax.

Maybe you're in a technical leadership position or have successfully convinced your team to adopt Kotlin.
You've expended some political capital to get Kotlin into the project.  Now you need to ensure that the transition goes smoothly and doesn't destabilise the existing, business critical Java code you are responsible for.  You have skin in the game.

So, this book won't introduce Kotlin features to you.  Instead, we  explore how to adapt one's design approach to take advantage of Kotlin's features, and how you can do so safely in a mixed Java/Kotlin codebase by _refactoring_ to Kotlin.

ifdef::todos[]
TODO: something about the topics not being exhaustive.
endif::[]
