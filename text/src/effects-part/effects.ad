[[effects]]
[part]
== Effects and IO (To be folded in)

One of the dichotomies of software development is that immutability makes things much simpler, but in the end software that doesn't mutate anything is useless.

In this part we'll look at ways to write simple but useful code.
We'll look at a system for categorising code that will allow you to keep control of mutation, so that it does not begin to control you.

In the worked example we'll refactor some Java to limit the scope of time-sensitive code and see how that improves its design and communication.

:leveloffset: +1

include::1-effects-intro.ad[]

include::2-effects-refactoring.ad[]