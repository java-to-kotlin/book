== Refactoring _to_ Data Transformation

* refactoring loops and mutation to value types and transformations using the stdlib
** CostSummary.calculate example
** Aggregation into intermediate form.  Example of the following design process:
*** Transform inputs into outputs.
*** If you can't do that easily in one step, transform inputs into an intermediate representation from which it is easy to transform into outputs.
*** Can't do _that_ easily in one step? Repeat until you can.


* Converting imperative Java code to Kotlin to make it easier to write in a transformational style
** Add new functionality: report required stays on a Route
** needs a zip, impossible with Streams
