[[value-types]]
[part]
== Principles and Values

The grain of Kotlin encourages immutable data and programming by transforming collections of data with higher-order functions.

== Values and Transformations

TODO:

 - Refactoring a value type from Java to Kotlin
   * NB: a more complicated example than our current first data type
   * data class means much less code, and less to test
   * Collections are immutable by default: getting rid of defensive copying
   * copy(...): getting rid of withXXX helper methods


== Opt and Optionality

 - Nulls are type safe!
   * Refactoring Optional<T> to T?
   * Flow typing for the win
   * Null-safe dereference & Elvis operators


== Data Transformation Pipelines

TODO:

 - Transform inputs into outputs.

   * If you can't do that easily in one step, transform inputs into an intermediate representation from which it is easy to transform into outputs.
      Can't do _that_ easily in one step?
      Repeat until you can.

 - Refactoring Java streams to Kotlin stdlib

 - Abstracting common transformations into extension methods
   * call forward to extension methods part


== Refactoring _to_ Values

TODO:

 - refactoring loops and mutation to value types and transformations using the stdlib

   * ideally an example that needs zip.

