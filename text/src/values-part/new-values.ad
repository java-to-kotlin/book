[[value-types]]
[part]
== Principles and Values

The grain of Kotlin encourages immutable data and programming by transforming collections of data with higher-order functions.

== Values and Transformations

TODO:

 - Refactoring a value type from Java to Kotlin
   * NB: a more complicated example than our current first data type
   * data class means much less code, and less to test
   * getting rid of defensive copying
   * getting rid of withXXX helper methods
 - Nulls are type safe!
   * Refactoring Optional<T> to T?
   * Flow typing for the win
   * Null-safe dereference & Elvis operators

== Data Transformation Pipelines

TODO:

 - refactoring Java streams to Kotlin stdlib
 - abstracting common transformations into extension methods
   * call forward to extension methods part


== Refactoring _to_ Values

TODO:

 - refactoring loops and mutation to value types and transformations using the stdlib

