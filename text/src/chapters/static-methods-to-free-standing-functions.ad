[[static-methods-to-free-standing-functions]]
== Static Methods to Free Standing Functions

Static functions are one of the fundamental building blocks of software.
In Java, they have to be declared as methods on a class, but in Kotlin we can declare them as free-standing, top-level entities.
Should we prefer this form, and how do we migrate from the Java to the Kotlin style?


=== Java Classes

All and code and state in a Java program have to belong to a class.
The language designers had studied C++, which was an extension to C.
C has only free-standing functions, C++ added classes, so now code could be in two places and people had to choose.
Java went with hosting all functions as methods in order to reduce the tyranny of choice.



What do we mean by function?
- a static method
- not depending on mutable static state in the class
- probably a calculation


Convert to Kotlin translates a class of static methods into an object with methods annotated as @JvmStatic.

Then we show how to refactor methods from methods of a singleton object to top-level functions, while keeping dependent Java code unaffected.

This is already written up in the JSON DSL example (<<methods-to-operators>>), but that example needs to be simplified or the JSON DSL chapter split into two topics.
