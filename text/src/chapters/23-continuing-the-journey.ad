== Continuing the Journey
//TODO finish the final chapter

We've come to the end of the book, but not the end of the journey.
From here, you'll have to continue alone...

But before you go, let's look back at the main ideas that underpin this book.

We started with the idea that programming languages have a "grain" that influences the design of the programs we write in those languages.
The grain makes certain design styles easy to apply, and makes others arduous or risky.

The grain of Kotlin is different to that of Java.
Java's grain favours mutable objects and reflection, over type safety and composition, although functional features have been introduced in recent revisions.
In contrast, Kotlin favours the transformation of immutable values, free standing functions, and has a type system that is unobtrusive and helpful.

Java and Kotlin can coexist in the same codebase.
The interop boundary is almost seamless, although there are some risks when you pass information from the strictly typed world of Kotlin to the more loosely typed world of Java.

It is easy to convert Java to Kotlin with the IntelliJ IDE, but we end up with "Java in Kotlin syntax."
To make the most of Kotlin, we have to change the way we design to work with the grain of the new language:
separate calculations and data from actions;
move I/O and other effects outwards;
move mutation and mutable state outwards (towards where I/O happens) or inwards (to become the responsibility of the runtime).

Transform code from idiomatic Java to idiomatic Kotlin in small, safe steps.
Use automatic refactoring tools where possible; edit text as a last resort.
We can support conventions of both languages at the same time if we will continue to maintain Java code in a large codebase that is being converted to Kotlin over time.

=== Functional Thinking

As we've seen in some of our history lessons, the grain of Java was formed in the 1990s, when we thought that object-oriented programming might be the mythical silver bullet.
When OO turned out not to solve all our problems, mainstream programming languages, and even Java itself, began to adopt ideas from functional programming.
Kotlin was born from Java in this age, and, like our children are better equipped for the next 50 years than we are, it is more suited to modern programming than Java.

What do we mean by function thinking?
Answering that question has been the reason for this journey, and having accompanied you on its many legs, here's our take.

Our software is ultimately limited by our ability to understand it.
Complexity drives lack of understanding, and a lot of that complexity arises over confusion about _when_ things happen.
Functional programmers have learned that the easiest way to tame that complexity is simply to have things _happen_ a lot less.
They call things happening an _effect_: a change that is observable in some scope.

Mutating a variable or a collection _inside_ a function is an effect, but unless that variable is shared _outside_ the function it doesn't _affect_ any other code.
When the scope of an effect is local to a function, we don't have to consider it when reasoning about what our system does.
As soon as we mutate shared state (a parameter to the function perhaps, or a global variable, or a file or network socket) our local effect becomes an effect in whatever scope can see the shared thing, and that quickly increases complexity and reduces understanding.

It isn't enough that a function doesn't _actually_ mutate shared state -- if it _can_ mutate it we have to examine the source of the function (and, recursively, every function that it calls that can also access that state) to be sure that it doesn't mutate anything if we are to understand what our system does.
Every piece of global mutable state makes every function suspect.
Similarly, if we program in an environment in which every function can write to the database, we lose the ability to predict when such writes can occur and plan accordingly.

So functional programmers tame complexity by reducing mutation.
Sometimes they program in languages (like Clojure and Haskell) that enforce controls on mutation.
Otherwise, they work by convention.
If we adopt these conventions in more general languages, we gain the ability to reason with our code in proportion to how much we adopt the conventions.
Kotlin chooses not to enforce the control of effects, but the language and its runtime come with some built-in conventions to nudge us in the right direction.
Compared to Java we have, for example: `val` rather than a non-default `final` modifier, read-only views of collections, and data classes to encourage copy-on-write rather than mutation.
Many of this book's chapters describe more subtle conventions with the same aim - <<beans-to-values>>, <<java-to-kotlin-collections>>, <<actions-to-calculations>>, <<accumulating-objects-to-transformations>> and <<performing-io-to-passing-data>>.

There is of course much more to functional programming than simply not mutating shared state,
but, if we just focus on solving problems without mutation (or where mutation is the point, we minimise its scope), our systems become easier to understand and to change.
Like https://en.wikipedia.org/wiki/Don%27t_repeat_yourself[Don't Repeat Yourself] (aka https://wiki.c2.com/?OnceAndOnlyOnce[Once and Only Once]) assiduous application of a simple rule has profound effects.
Both rules share another property though -- if we aren't careful their application can  increase complexity faster than they reduce it.
We need to learn techniques that allow us to manage mutation (and remove duplication, and facilitate testing, and so on) without making our code even harder to understand, and to recognise these techniques for what they are when we see them.
These techniques will tend to be different in different languages, environments and domains, and are the craft of our profession.

As you research functional techniques, you will come across a lot of anti-object sentiment.
This seems to be rooted in a perception that OO is all about mutable objects, but we shouldn't throw the message-passing baby out with the mutable bathwater.
Whilst we can use OO to manage shared mutable state, in practice these days we generally use it to encapsulate immutable state, or to represent services and their service dependencies.
We saw in <<interfaces-to-functions>> that we can use both functions with closure, and classes with properties, to encapsulate data.
Both can also hide code details, and allow a client to work with different implementations.
We need these points of inflection to build flexible, robust and testable systems.
Where in Java we traditionally reach for subclassing as tool; Kotlin, with its default-closed classes, encourages a more compositional style.
Instead of overriding a protected method, we have a function-typed property representing an inflection.
We should favour this style, but not be embarrassed to define class and sub-class hierarchies where they simplify our implementation.
Similarly, extension functions <<functions-to-extension-functions>> are all very well, and they can work wonders to reduce coupling between disparate concerns in our codebases, but they are no substitute for polymorphic methods when that is what we need.

=== Functional Programming and Textual Reasoning

// in progress... pushed to sync

When we finished this book, we realised -- to our surprise -- that we had not included any software design diagrams.

When we've written about object-oriented design, we've relied on diagrams -- particularly object and sequence diagrams -- to show the dynamic structure and behaviour of the software and how changes to the source will change the dynamic behaviour.
In object-oriented software, that dynamic structure -- the graph of objects and how messages flow between them -- is largely implicit.
This makes it hard to relate what you see in the source to what will happen at runtime, so visualisation is a vital part of object-oriented programming.
Through the 1980's and 1990's, software design luminaries created a variety of diagramming formats to visualise object-oriented software.
In the mid 1990's, the designers of the most popular notations, Grady Booch, Ivar Jacobson and James Rumbaugh, combined their efforts into the _Unified Modelling Language_ (UML).

A functional style makes it easier to reason by manipulating the textual expressions in our source code, rather than thinking hard about mechanisms that are not immediately apparent in the source and have to be visualised to be understood.

Typing & referential transparency are all related to reasoning with the syntax alone.


=== Refactoring

=== Fixing the Small Things

=== Planning the Big Things

// After this point it's just sketched out.

We didn't mention it until now.
This book is based on an implicit "big idea" that we so take for granted that we didn't think of writing about it.
That big idea is: all programming is program transformation.
Text is just a presentation of the program. It is not _the_ program.
The program is the graph of which the text is a projection.
Programming is applying transformations to that graph.

We refactor all the time.
"Make the change easy, then make the easy change" -- Kent Beck.




