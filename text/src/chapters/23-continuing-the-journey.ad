== Continuing the Journey
//TODO finish the final chapter

We've come to the end of the book, but not the end of the journey.
From here, you'll have to continue alone...

But before you go, let's look back at the main ideas that underpin this book.

We started with the idea that programming languages have a "grain" that influences the design of the programs we write in those languages.
The grain makes certain design styles easy to apply, and makes others arduous or risky.

The grain of Kotlin is different to that of Java.
Java's grain favours mutable objects and reflection, over type safety and composition, although functional features have been introduced in recent revisions.
In contrast, Kotlin favours the transformation of immutable values, free standing functions, and has a type system that is unobtrusive and helpful.

Java and Kotlin can coexist in the same codebase.
The interop boundary is almost seamless, although there are some risks when you pass information from the strictly typed world of Kotlin to the loosely typed world of Java.

It is easy to convert Java to Kotlin with the IntelliJ IDE, but we end up with "Java in Kotlin syntax."
To make the most of Kotlin, we have to change the way we design to work with the grain of the new language:
separate calculations and data from actions;
move mutation and mutable state outwards (towards where I/O happens) or inwards (to become the responsibility of the runtime);
move I/O and other effects outwards.

Use IntelliJ's refactoring tools to transform code from idiomatic Java to idiomatic Kotlin in small, safe steps.
We can support conventions of both languages at the same time if we will continue to maintain Java code in a large codebase that is being converted to Kotlin over time.

// After this point it's just sketched out.

We didn't mention it until now.
This book is based on an implicit "big idea" that we so take for granted that we didn't think of writing about it.
That big idea is: all programming is program transformation.
Text is just a presentation of the program. It is not _the_ program.
The program is the graph of which the text is a projection.
Programming is applying transformations to that graph.
We refactor all the time.
"Make the change easy, then make the easy change" -- Kent Beck.

Note: no diagrams!
Moving from OO to FP makes it easier to reason algebraically -- by manipulating textual expressions, not by thinking hard about mechanisms that are not immediately apparent in the source and have to be visualised to be understood.
