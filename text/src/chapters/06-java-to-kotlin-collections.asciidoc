[[java-to-kotlin-collections]]
== Java to Kotlin Collections

++++
<blockquote data-type="epigraph">
<p>On the face of it, Java and Kotlin have very similar collections libraries; they certainly interoperate suspiciously seamlessly.
What are the differences, what motivates them, and where do we have to take care as we move from Java to Kotlin collections?</p>
</blockquote>
++++

[[java-collections]]
=== Java Collections

In((("collections", "Java collections", id="Cjava06")))((("Java", "Java collections", id="JPScollect06"))) <<beans-to-values>> we saw how Java grew up in the days when we saw objects as fundamentally stateful and mutable.
This was particularly true for collections—I mean, what is the point of a list if you can't add to it?
We build collections by creating an empty one and adding to it.
Need to remove an item from a shopping cart?
Mutate the list.
Shuffle a pack of cards?
Obviously that changes the order of the deck.
We wouldn't create a new paper to-do list every time we need milk or take the cat to the vet. Mutable collections mirror our real world experience.

On its release, the quality of its built-in collections was a good reason to adopt Java.
In those days many languages had no resizable collections in their standard library.
Object technology allowed us to define and use mutable collections safely.
It was only natural to use this superpower now that it had been given to us, so we went ahead and used `Vector` and `HashTable` as Sun intended.
Which is to say, we created them and then mutated them.
There was no choice, because all the constructors created empty [.keep-together]#collections#.

Java 2 (which was version 1.2 until Java had to compete with C# version numbers) introduced a revised collections library.
This tidied up the ad hoc `Vector`, `Stack`, and `Hashtable` classes and created a common `Collection` interface with more useful implementations, including `ArrayList` and `HashSet`.
It was now possible to create a collection as a copy of another collection.
The static `Collections` class provided some helpful utility operations, like `sort` and `reverse`.
Java 5 introduced generics, and [.keep-together]#cleverly# retrofitted them to the existing collections, so that now we could declare types like `List<Journey>`.

The Java collections remained mutable, though—very mutable.
Not only are there operations to add and remove items, but also operations like sort are defined _only_ as mutations; there is no standard library function to return a sorted copy of a `List`.

As we will keep on saying, mutation is the source of many of our problems with complexity, because it allows state in one place to get out of sync with respect to state in another.
For example, in Travelator we can represent a route as a `List` of `Journey`.
There is also the concept of a suffer-score: the lower the suffer-score, the more pleasant a route is likely to be.
Here is how we calculate a suffer-score for a route:

// begin-insert: collections.0:src/main/java/travelator/Suffering.java#sufferScoreFor
[source,java]
----
public static int sufferScoreFor(List<Journey> route) {
    Location start = getDepartsFrom(route);
    List<Journey> longestJourneys = longestJourneysIn(route, 3);
    return sufferScore(longestJourneys, start);
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.1">Example 6.1 [collections.0:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.1">(diff)</a> 
</div>
++++
// end-insert

That `start` local variable doesn't add much, so we decide to inline it:

// begin-insert: collections.1:src/main/java/travelator/Suffering.java#sufferScoreFor
[source,java]
----
public static int sufferScoreFor(List<Journey> route) {
    List<Journey> longestJourneys = longestJourneysIn(route, 3);
    return sufferScore(longestJourneys, getDepartsFrom(route));
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.2">Example 6.2 [collections.1:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.2">(diff)</a> 
</div>
++++
// end-insert

Our tests pass, we push to production, but we get bug reports suggesting that all is not well.
Drilling down we find:

// begin-insert: collections.0:src/main/java/travelator/Routes.java#getDepartsFrom
[source,java]
----
public static Location getDepartsFrom(List<Journey> route) {
    return route.get(0).getDepartsFrom();
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.3">Example 6.3 [collections.0:src/main/java/travelator/Routes.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.3">(diff)</a> 
</div>
++++
// end-insert

// begin-insert: collections.0:src/main/java/travelator/Suffering.java#longestJourneysIn
[source,java]
----
public static List<Journey> longestJourneysIn(
    List<Journey> journeys,
    int limit
) {
    journeys.sort(comparing(Journey::getDuration).reversed()); // <1>
    var actualLimit = Math.min(journeys.size(), limit);
    return journeys.subList(0, actualLimit);
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.4">Example 6.4 [collections.0:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.4">(diff)</a> 
</div>
++++
// end-insert

<1> `journeys` parameter mutated by `sort`

Ah, now((("aliasing errors"))) we can see that finding the longest journeys has changed the apparent departure `Location`.
A developer called methods on a parameter (`journeys`) to solve a problem, and that turned out to break code somewhere else in the system!
You only have to spend several hundred hours of your life debugging the problems caused by https://oreil.ly/PeqKs[aliasing errors] like this to come to the conclusion that immutable data would be a better default.
For the JDK developers, this point evidently came after the introduction of Java 2, so we have forever been stuck with mutable collections interfaces.

To be fair, although Java's collections are mutable in theory, they have, over the years, become less and less so in practice.
Even at the start, it was possible to wrap a collection with, for example, `Collections.unmodifiableList`.
The result is still a `List`; it still has all the mutation methods, but they all throw `UnsupportedOperationException`.
We could have found out about the problem of `shortestJourneyIn` mutating our list by wrapping the result from `loadJourneys` in an `UnmodifiableList`.
The tests of any code that combined the two would quickly fail, albeit only when run as opposed to when compiled.
It's a shame that we cannot depend on the type system to ensure correctness, but we can't go back in time, so this is a pragmatic patch.

Wrapping((("List.copyOf(collection)")))((("UnmodifiableList"))) a list in an `UnmodifiableList` solves the problems of depended-on code mutating our collection.
If it's possible for the _original list_ to be modified, we can still have issues though, because the wrapper reads through to its underlying collection.
So an `UnmodifiableList` doesn't guarantee that it never changes, just that it cannot be modified through the wrapper.
In these cases we have to take a defensive copy of the original list if we are to be isolated from changes.
`List.copyOf(collection)` was added in Java 10 to copy an underlying collection as an `AbstractImmutableList`, which is neither modifiable nor subject to changes in the original collection.

All this second-guessing of whether the source or destination of a collection is likely to modify it, and taking appropriate action, is tedious and error-prone.
The problem applies to any mutable data, but changing collections is particularly pernicious, because we often derive values (such as `departsFrom`) that can get out of date if we change the collection that we extracted them from.
Rather than taking defensive copies at every function boundary, many teams, your authors' included, adopted a simpler and more efficient strategy.

[[dont-mutate-shared-collections]]
.Don't Mutate Shared Collections
****
Treat((("mutability", "shared collections")))((("collections", "shared collections"))) any collection shared between separate pieces of code as immutable.
Sharing includes references received as a parameter, returned as a result, or assigned to a shared variable.
This applies even if the collection started life as mutable, and despite the mutation operations present in the Java interfaces.

When code that we don't own does not respect this convention, we can use copies to insulate our code from mutation.
****

This((("Collections.unmodifiableList(...)"))) strategy doesn't stop us from creating mutable collections and populating them within a function, but code should only change a collection that it has just created.
As soon as we return a reference as a result, we should treat it as immutable—_create, don't mutate_.
We might occasionally enforce this immutability by wrapping with [.keep-together]#++Collections.unmodifiableList(...)++# etc., but in an aligned development team this is unnecessary, because no one would treat a shared collection as mutable.

There will of course be exceptions to the rule, places where, usually for reasons of efficiency, we want to share a collection as a mutable collection.
In these cases we can get dispensation by naming (`accumulator` is a good start) and by limiting the scope of the sharing as much as possible.
Within a function is ideal, between private methods in a class acceptable, across module boundaries very rarely so.
<<accumulating-objects-to-transformations>> discusses ways to avoid (visibly) mutable collections in these situations.

Project teams that adopt this convention can produce simple and reliable software in spite of collections' mutability.
On the whole, the benefits of treating collections as immutable outweigh the problems of a type system that is lying to you, because values are just so valuable.
The JVM's libraries may hark back to the days when mutability was the norm, but this is a case where the grain of Java is shifting to the immutable, and it's better to be ahead of this change than behind it.((("", startref="Cjava06")))((("", startref="JPScollect06")))

=== Kotlin Collections

In((("collections", "Kotlin collections", id="Ckotling06")))((("Kotlin", "Kotlin collections", id="Kcollect06"))) contrast to Java, Kotlin and its standard library were designed in an age when mutability had fallen out of fashion.
However, smooth interoperation with Java was a key goal, and Java has mutable collections.
Scala had tried introducing its own sophisticated persistent (immutable but data-sharing) collections, but this forced developers to copy information between collections on the interop boundary, which was both inefficient and annoying.
How could Kotlin square the circle and have immutable collections interoperate seamlessly with Java?

The Kotlin developers removed the mutation methods from the Jave collections interfaces and published them in the `kotlin.collections` package as `Collection<E>`, `List<E>`, and so on.
These were then extended by `MutableCollection<E>`, ++Mutable&#x200b;L&#x2060;ist<E>++, etc., which add back in the Java mutation methods.
So((("MutableList")))((("MutableCollection"))) in Kotlin we have [.keep-together]#++MutableList++#, which is a subtype of `List`, which is a subtype of `Collection`.
`MutableList` also implements `MutableCollection`.

On the face of it, this is a simple scheme.
Mutable collections have the same operations as collections that are not mutable, plus the mutation methods.
It is safe to pass a `MutableList` as an argument to code that expects a `List`, because all the `List` methods will be present and can be invoked.
In terms of the https://oreil.ly/8A8KO[Liskov Substitution Principle], we can substitute a `MutableList` for a `List` without affecting our program correctness.

A little compiler magic allows Kotlin code to accept a `java.util.List` as a ++kotlin.&#x200b;col&#x2060;lections.List++:

// begin-insert: src/test/java/collections/ListInteropTest.kt#immutable
[source,kotlin]
----
val aList: List<String> = SomeJavaCode.mutableListOfStrings("0", "1")
aList.removeAt(1) // doesn't compile
----
// end-insert

That magic also allows Kotlin to accept the Java `List` as a ++kotlin.collections.&#x200b;Muta&#x2060;bleList++:

// begin-insert: src/test/java/collections/ListInteropTest.kt#mutable
[source,kotlin]
----
val aMutableList: MutableList<String> = SomeJavaCode.mutableListOfStrings(
    "0", "1")
aMutableList.removeAt(1)
assertEquals(listOf("0"), aMutableList)
----
// end-insert

In fact, because the Java `List` is actually mutable here, we could (but almost always shouldn't) downcast to Kotlin's `MutableList` and mutate:

// begin-insert: src/test/java/collections/ListInteropTest.kt#cast
[source,kotlin]
----
val aList: List<String> = SomeJavaCode.mutableListOfStrings("0", "1")
val aMutableList: MutableList<String> = aList as MutableList<String>
aMutableList.removeAt(1)
assertEquals(listOf("0"), aMutableList)
----
// end-insert

In the other direction, the compiler will allow both a `kotlin.collections.MutableList` and a `kotlin.collections.List` where a `java.util.List` is needed:

// begin-insert: src/test/java/collections/ListInteropTest.kt#javaAcceptMutableList
[source,kotlin]
----
val aMutableList: MutableList<String> = mutableListOf("0", "1")
SomeJavaCode.needsAList(aMutableList)
----
// end-insert

// begin-insert: src/test/java/collections/ListInteropTest.kt#javaAcceptList
[source,kotlin]
----
val aList: List<String> = listOf("0", "1")
SomeJavaCode.needsAList(aList)
----
// end-insert

At face value, so far everything has been very plausible.
Unfortunately, when it comes to mutability, there is more to substitution than Barbara Liskov's principle.
As we saw in <<java-collections>>, just because we can't see mutators on our reference of type `kotlin.collections.List`, it doesn't mean that the contents cannot change.
The actual type could be a `java.util.List`, which _is_ mutable.
In some ways it's worse in Kotlin, because we can convert a `MutableList` to a `List` in passing:

// begin-insert: src/test/java/collections/ListInteropTest.kt#upCast
[source,kotlin]
----
val aMutableList = mutableListOf("0", "1")
val aList: List<String> = aMutableList
----
// end-insert

Now let's say that we accept a `List<String>` somewhere, and take its immutabilty at face value:

// begin-insert: src/test/java/collections/ListInteropTest.kt#aClass
[source,kotlin]
----
class AValueType(
    val strings: List<String>
) {
    val first: String? = strings.firstOrNull()
}
----
// end-insert

Everything seems fine:

// begin-insert: src/test/java/collections/ListInteropTest.kt#passAsList
[source,kotlin]
----
val holdsState = AValueType(aList)
assertEquals(holdsState.first, holdsState.strings.first())
----
// end-insert

But wait, don't we still have a reference to a `MutableList`?

// begin-insert: src/test/java/collections/ListInteropTest.kt#mutate
[source,kotlin]
----
aMutableList[0] = "banana"
assertEquals(holdsState.first, holdsState.strings.first()) // <1>
----
// end-insert

<1> `Expected "0", actual "banana"`

`AValueType` turns out to be mutable after all!
Because of this, `first`, which is initialized on construction, can get out of date.
Having nonmutable collections interfaces has not resulted in immutable collections!

.Immutable, Read-Only, Mutable
[TIP]
====
The((("read-only views"))) official line is that a nonmutable Kotlin collection is not _immutable_, but rather a _read-only view_ of a collection.
As with the Java `UnmodifiableList`, a read-only collection can't be changed through its interface, but may be changed through some other mechanism.
Only true _immutable_ collections are guaranteed never to change.

It is possible to have true immutable collections on the JVM, (the result of `java.util.List.of(...)`, for example), but this is not (yet) a standard Kotlin feature.
====

This is the unfortunate consequence of having your mutable collections extend your otherwise nonmutable collections; the recipient of a nonmutable collection cannot modify it, but cannot know that it won't change, because a reference of type nonmutable `List` may in fact be pointing to an object of type `MutableList`.

The rigorous solution to this problem is to separate mutable from immutable collections by not having a subtype relationship.
In this scheme, if we have a mutable list and want an immutable copy of it, we have to copy the data.
A((("StringBuilder"))) good analogy is a `StringBuilder`.
This is effectively a mutable `String`, but is not a subtype of `String`.
Once we have a result we want to publish, we need to call `.toString()`,
and subsequent modifications to the `StringBuilder` will not affect previous results.
Both Clojure and Scala adopted this builder approach for their mutable collections—why doesn't Kotlin?

We((("collections", "shared collections"))) suspect that the answer is: because the Kotlin designers, like your authors, had adopted the convention described in <<dont-mutate-shared-collections>>.
If you treat any collection received as a parameter, returned as a result, or otherwise shared between code as immutable, then having mutable collections extend nonmutable collections turns out to be quite safe.
Admittedly _quite_ in the sense of _mainly_, rather than _completely_, but still the benefits outweigh the costs.

The Kotlin collections make this scheme even more powerful.
In Java, we have the situation where we can, in theory, mutate any collections, so the type system doesn't tell us when this is safe or otherwise.
In Kotlin, if we declare all normal references as the nonmutable versions, we can use a `MutableCollection` to document when we do, in fact, consider that the collection is subject to change.
In return for accepting a largely theoretical risk, we reap the rewards of very simple and efficient interoperation with Java.
Pragmatism is typical of the grain of Kotlin; in this case it might be expressed as "be as safe as is sensible, but no safer."

We said that another way to express the "Don't Mutate Shared Collections" is that our code should only mutate a collection that it has just created.
We see this in action if we look into the Kotlin standard library.
Here, for example, is (a simplified version of) the definition of `map`:

// begin-insert: src/main/java/collections/dont_import_me/collections.kt
[source,kotlin]
----
inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {
    val result = ArrayList<R>()
    for (item in this)
        result.add(transform(item))
    return result
}
----
// end-insert

Here the list is built in place by mutation and then returned as read-only.
This is simple _and_ efficient.
Technically, we _could_ downcast the result to `MutableList` and change the result, but we shouldn't.
Instead, we should take the result type at face value.
That way, any code sharing this collection will not have to worry about it changing.((("", startref="Kcollect06")))((("", startref="Ckotling06")))

=== Refactoring from Java to Kotlin Collections

Because((("collections", "refactoring from Java to Kotlin collections", id="Crefact06")))((("refactoring", "Java to Kotlin collections", id="RjavatoK06"))) of the smooth interop between Java and Kotlin collections described earlier, converting code with collections is usually seamless, at least at the syntactic level.
If our Java code relies on mutating collections, though, we may have to take extra care to avoid ending up breaking invariants in Kotlin.

A good approach is to refactor your Java code to the convention used in <<dont-mutate-shared-collections>>  before converting it to Kotlin.
That's what we'll do here.

==== Fix Up the Java

Let's have a look at the code from Travelator we saw earlier.
The static methods we've been looking at are in a class called `Suffering`:

// begin-insert: collections.0:src/main/java/travelator/Suffering.java
[source,java]
----
public class Suffering {

    public static int sufferScoreFor(List<Journey> route) {
        Location start = getDepartsFrom(route);
        List<Journey> longestJourneys = longestJourneysIn(route, 3);
        return sufferScore(longestJourneys, start);
    }

    public static List<Journey> longestJourneysIn(
        List<Journey> journeys,
        int limit
    ) {
        journeys.sort(comparing(Journey::getDuration).reversed()); // <1>
        var actualLimit = Math.min(journeys.size(), limit);
        return journeys.subList(0, actualLimit);
    }

    public static List<List<Journey>> routesToShowFor(String itineraryId) {
        var routes = routesFor(itineraryId);
        removeUnbearableRoutes(routes);
        return routes;
    }

    private static void removeUnbearableRoutes(List<List<Journey>> routes) {
        routes.removeIf(route -> sufferScoreFor(route) > 10);
    }

    private static int sufferScore(
        List<Journey> longestJourneys,
        Location start
    ) {
        return SOME_COMPLICATED_RESULT();
    }
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.5">Example 6.5 [collections.0:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.5">(diff)</a> 
</div>
++++
// end-insert

<1> `longestJourneysIn` breaks our rule by mutating its parameter.

As we saw previously, because `longestJourneysIn` mutates its parameter, we can't change the order of evaluation of `getDepartsFrom`, and `longestJourneysIn` in `sufferScoreFor`.
Before we can fix this, we have to be sure that no other code depends on this mutation.
This can be hard, which is itself a good reason not to allow modifying collections from the outset.
If we have confidence in our tests, we can try making the edit and seeing whether anything breaks.
Otherwise, we may have to add tests and/or reason with our code and dependency analysis.
Let's decide that it's safe to go ahead and make the change in Travelator.

We don't want to sort the collection in place, so we need a function that returns a sorted copy of a list without modifying the original.
Even Java 16 doesn't seem to have a function to do this.
Curiously, `List.sort` actually creates a sorted version of itself and then mutates itself to match:

[source,java]
----
@SuppressWarnings({"unchecked", "rawtypes"})
default void sort(Comparator<? super E> c) {
    Object[] a = this.toArray();
    Arrays.sort(a, (Comparator) c);
    ListIterator<E> i = this.listIterator();
    for (Object e : a) {
        i.next();
        i.set((E) e);
    }
}
----

This just goes to show how mutable thinking was the grain of Java, back in the Java 8 days when this was written.
There((("Stream.sorted"))) is now `Stream.sorted`, but in our experience streams rarely perform well with small collections (see <<streams-to-sequences>>).
Maybe we shouldn't care about performance, but we can't help ourselves!
We justify our indulgence by reasoning that we know of several places in the code that currently sort in place, so will have to be changed to remove the mutation of shared collections.
Reasoning that the authors of `List.sort` actually knew a thing or two about Java efficiency, we copy their code and write:

// begin-insert: collections.3:src/main/java/travelator/Collections.java#sorted
[source,java]
----
@SuppressWarnings("unchecked")
public static <E> List<E> sorted(
    Collection<E> collection,
    Comparator<? super E> by
) {
    var result = (E[]) collection.toArray();
    Arrays.sort(result, by);
    return Arrays.asList(result);
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.6">Example 6.6 [collections.3:src/main/java/travelator/Collections.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.6">(diff)</a> 
</div>
++++
// end-insert

Before we go on, it's worth considering how we can be confident that this code is correct.
Because of mutation, it's really quite hard.
We have to be sure that `Arrays.sort` won't affect the input collection, which means checking the documentation for [.keep-together]#++Collection.toArray++#.
When we do, we find the magic words "The caller is thus free to modify the returned array," so that's OK; we've decoupled the input from the output.
This function is a classic example of accepting mutation in the scope where we create a collection, but not outside—create, don't mutate.

While we're pulling this thread, what are we returning, and is it mutable?
++Arrays.&#x200b;as&#x2060;L&#x2060;ist++ returns an `ArrayList`, but not the standard one.
This one is private inside [.keep-together]#++Arrays++# and writes through to our `result`.
Because it is backed by an array, though, we cannot add or remove items. It isn't resizable.
It turns out that Java collections aren't just mutable, nonmutable, or immutable; they are sometimes mutable provided that we don't change their structure!
None of these distinctions are reflected in the type system, so it is possible to make type-preserving changes that break at runtime, depending on which code path yields a collection that we subsequently try to modify, and how we try to modify it.
This is yet another reason to sidestep the issue altogether and just never modify a shared collection.

Returning to our refactoring, we can use our new `sorted` in `longestJourneysIn` to stop modifying the shared collection.

Using `sort`, we had:

// begin-insert: collections.2:src/main/java/travelator/Suffering.java#longestJourneysIn
[source,java]
----
public static List<Journey> longestJourneysIn(
    List<Journey> journeys,
    int limit
) {
    journeys.sort(comparing(Journey::getDuration).reversed());
    var actualLimit = Math.min(journeys.size(), limit);
    return journeys.subList(0, actualLimit);
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.7">Example 6.7 [collections.2:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.7">(diff)</a> 
</div>
++++
// end-insert

Our new `sorted` function allows us to write:

// begin-insert: collections.3:src/main/java/travelator/Suffering.java#longestJourneysIn
[source,java]
----
static List<Journey> longestJourneysIn(
    List<Journey> journeys,
    int limit
) {
    var actualLimit = Math.min(journeys.size(), limit);
    return sorted(
        journeys,
        comparing(Journey::getDuration).reversed()
    ).subList(0, actualLimit);
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.8">Example 6.8 [collections.3:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.8">(diff)</a> 
</div>
++++
// end-insert

Now that `sufferScoreFor` won't be subject to the side effect in `longestJourneysIn`, we can inline its local variables:

// begin-insert: collections.4:src/main/java/travelator/Suffering.java#sufferScoreFor
[source,java]
----
public static int sufferScoreFor(List<Journey> route) {
    return sufferScore(
        longestJourneysIn(route, 3),
        getDepartsFrom(route));
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.9">Example 6.9 [collections.4:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.9">(diff)</a> 
</div>
++++
// end-insert

Inlining local variables might not seem much of a payoff, but it's a small example of a bigger theme.
In <<actions-to-calculations>>, we'll look at how avoiding mutation allows us to refactor code in ways that just aren't safe otherwise.

Stepping out to look at the callers of `sufferScoreFor`, we find:

// begin-insert: collections.4:src/main/java/travelator/Suffering.java#routesToShowFor
[source,java]
----
public static List<List<Journey>> routesToShowFor(String itineraryId) {
    var routes = routesFor(itineraryId);
    removeUnbearableRoutes(routes);
    return routes;
}

private static void removeUnbearableRoutes(List<List<Journey>> routes) {
    routes.removeIf(route -> sufferScoreFor(route) > 10);
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.10">Example 6.10 [collections.4:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.10">(diff)</a> 
</div>
++++
// end-insert

Hmmm, that's so pathologically mutating that it might have been written as an example in a book!
At least `removeUnbearableRoutes` is telling us that it must mutate something by returning `void`.
We can take baby steps by changing the function to return the parameter it is mutating and using the result—another case of making something worse before making it better:

// begin-insert: collections.5:src/main/java/travelator/Suffering.java#routesToShowFor
[source,java]
----
public static List<List<Journey>> routesToShowFor(String itineraryId) {
    var routes = routesFor(itineraryId);
    routes = removeUnbearableRoutes(routes);
    return routes;
}

private static List<List<Journey>> removeUnbearableRoutes
    (List<List<Journey>> routes
) {
    routes.removeIf(route -> sufferScoreFor(route) > 10);
    return routes;
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.11">Example 6.11 [collections.5:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.11">(diff)</a> 
</div>
++++
// end-insert

This time we'll use `Stream.filter` to replace the mutation in `removeUnbearableRoutes`.
In passing, we can take the opportunity to rename it:

// begin-insert: collections.6:src/main/java/travelator/Suffering.java#routesToShowFor
[source,java]
----
public static List<List<Journey>> routesToShowFor(String itineraryId) {
    var routes = routesFor(itineraryId);
    routes = bearable(routes);
    return routes;
}

private static List<List<Journey>> bearable
    (List<List<Journey>> routes
) {
    return routes.stream()
        .filter(route -> sufferScoreFor(route) <= 10)
        .collect(toUnmodifiableList());
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.12">Example 6.12 [collections.6:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.12">(diff)</a> 
</div>
++++
// end-insert

Note how it is now easier to find a nice short name for our function; `removeUnbearableRoutes` becomes `bearable`.

The reassignment to `routes` in `routesToShowFor` is ugly, but deliberate, because it allows us to draw parallels with the refactor in <<beans-to-values>>.
There, we changed mutating-some-data-in-place to replacing-the-reference-with-a-mutated-value, and that is what we have done here too.
Of course, we don't need the local variable at all really, so let's get rid of it.
Invoking the Inline refactoring twice does it nicely:

// begin-insert: collections.7:src/main/java/travelator/Suffering.java#routesToShowFor
[source,java]
----
public static List<List<Journey>> routesToShowFor(String itineraryId) {
    return bearable(routesFor(itineraryId));
}

private static List<List<Journey>> bearable
    (List<List<Journey>> routes
) {
    return routes.stream()
        .filter(route -> sufferScoreFor(route) <= 10)
        .collect(toUnmodifiableList());
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.13">Example 6.13 [collections.7:src/main/java/travelator/Suffering.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.13">(diff)</a> 
</div>
++++
// end-insert

==== Convert to Kotlin

Now that we've removed all the mutation from our Java collections, it's time to convert to Kotlin.
"Convert Java File to Kotlin File" on our `Suffering` class does a reasonable job, but when we wrote this, it got confused, inferring the nullability of collections and their generic types.
After conversion, we had to remove ++?++s from some hairy types like `List<List<Journey?>>?` to have:

// begin-insert: collections.8:src/main/java/travelator/Suffering.kt
[source,kotlin]
----
object Suffering {
    @JvmStatic
    fun sufferScoreFor(route: List<Journey>): Int {
        return sufferScore(
            longestJourneysIn(route, 3),
            Routes.getDepartsFrom(route)
        )
    }

    @JvmStatic
    fun longestJourneysIn(
        journeys: List<Journey>,
        limit: Int
    ): List<Journey> {
        val actualLimit = Math.min(journeys.size, limit)
        return sorted(
            journeys,
            comparing { obj: Journey -> obj.duration }.reversed()
        ).subList(0, actualLimit)
    }

    fun routesToShowFor(itineraryId: String?): List<List<Journey>> {
        return bearable(Other.routesFor(itineraryId))
    }

    private fun bearable(routes: List<List<Journey>>): List<List<Journey>> {
        return routes.stream()
            .filter { route -> sufferScoreFor(route) <= 10 }
            .collect(Collectors.toUnmodifiableList())
    }

    private fun sufferScore(
        longestJourneys: List<Journey>,
        start: Location
    ): Int {
        return SOME_COMPLICATED_RESULT()
    } 
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.14">Example 6.14 [collections.8:src/main/java/travelator/Suffering.kt]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.14">(diff)</a> 
</div>
++++
// end-insert

We have also reformatted and tidied some imports.
On the plus side, the Java code calling our Kotlin hasn't had to change. Here, for example, is a test passing a plain Java `List` to the Kotlin `longestJourneyIn`:

// begin-insert: collections.8:src/test/java/travelator/LongestJourneyInTests.java#foo
[source,java]
----
@Test public void returns_limit_results() {
    assertEquals(
        List.of(longJourney, mediumJourney),
        longestJourneysIn(List.of(shortJourney, mediumJourney, longJourney), 2)
    );
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.15">Example 6.15 [collections.8:src/test/java/travelator/LongestJourneyInTests.java]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.15">(diff)</a> 
</div>
++++
// end-insert

Returning to the Kotlin, we can now take advantage of the many utilities available on Kotlin collections to simplify the code.
Take `longestJourneysIn`, for example.
This was:

// begin-insert: collections.8:src/main/java/travelator/Suffering.kt#longestJourneysIn
[source,kotlin]
----
@JvmStatic
fun longestJourneysIn(
    journeys: List<Journey>,
    limit: Int
): List<Journey> {
    val actualLimit = Math.min(journeys.size, limit)
    return sorted(
        journeys,
        comparing { obj: Journey -> obj.duration }.reversed()
    ).subList(0, actualLimit)
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.16">Example 6.16 [collections.8:src/main/java/travelator/Suffering.kt]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.16">(diff)</a> 
</div>
++++
// end-insert


Replacing `sorted` with `sortedByDescending`, and `subList` with `take` gives:

// begin-insert: collections.9:src/main/java/travelator/Suffering.kt#longestJourneysIn
[source,kotlin]
----
@JvmStatic
fun longestJourneysIn(journeys: List<Journey>, limit: Int): List<Journey> =
    journeys.sortedByDescending { it.duration }.take(limit)
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.17">Example 6.17 [collections.9:src/main/java/travelator/Suffering.kt]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.17">(diff)</a> 
</div>
++++
// end-insert

Now if we convert `longestJourneysIn` to an extension function (see <<functions-to-extension-functions>>), we can simplify its name to `longestJourneys`:

// begin-insert: collections.10:src/main/java/travelator/Suffering.kt#longestJourneysIn
[source,kotlin]
----
@JvmStatic
fun List<Journey>.longestJourneys(limit: Int): List<Journey> =
    sortedByDescending { it.duration }.take(limit)
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.18">Example 6.18 [collections.10:src/main/java/travelator/Suffering.kt]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.18">(diff)</a> 
</div>
++++
// end-insert

Because `longestJourneys` doesn't modify its parameter, we've made it a single-expression function (<<multi-to-single-expression-functions>>).
It can still be called from Java as a static method, but reads particularly nicely when called from Kotlin, especially if we name the argument:

// begin-insert: collections.10:src/main/java/travelator/Suffering.kt#sufferScoreFor
[source,kotlin]
----
@JvmStatic
fun sufferScoreFor(route: List<Journey>): Int {
    return sufferScore(
        route.longestJourneys(limit = 3), // <1>
        Routes.getDepartsFrom(route)
    )
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.19">Example 6.19 [collections.10:src/main/java/travelator/Suffering.kt]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.19">(diff)</a> 
</div>
++++
// end-insert

<1> Named argument

Moving on to `bearable`:

// begin-insert: collections.10:src/main/java/travelator/Suffering.kt#bearable
[source,kotlin]
----
private fun bearable(routes: List<List<Journey>>): List<List<Journey>> {
    return routes.stream()
        .filter { route -> sufferScoreFor(route) <= 10 }
        .collect(Collectors.toUnmodifiableList())
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.20">Example 6.20 [collections.10:src/main/java/travelator/Suffering.kt]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.20">(diff)</a> 
</div>
++++
// end-insert

Here we can use the techniques in <<streams-to-sequences>> to convert the `Stream` to Kotlin.
We remove the call to `.stream()` as Kotlin makes `filter` available as an extension function on `List`.
Then we don't need the terminal `toUnmodifiableList`, because Kotlin `filter` returns a `List` directly:

// begin-insert: collections.11:src/main/java/travelator/Suffering.kt#bearable
[source,kotlin]
----
private fun bearable(routes: List<List<Journey>>): List<List<Journey>> =
    routes.filter { sufferScoreFor(it) <= 10 }
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.21">Example 6.21 [collections.11:src/main/java/travelator/Suffering.kt]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.21">(diff)</a> 
</div>
++++
// end-insert

Interestingly, this is a place where the result is potentially more mutable than our Java was.
In Java, we were collecting with `Collectors.toUnmodifiableList()`.
Kotlin `filter` declares its return type as `List` (the read-only view), but the actual runtime type is the mutable `ArrayList`.
Provided we never downcast, this shouldn't be an issue, especially because we are now treating our shared collections as immutable even in Java.

Here then is the final code:

// begin-insert: collections.11:src/main/java/travelator/Suffering.kt
[source,kotlin]
----
object Suffering {
    @JvmStatic
    fun sufferScoreFor(route: List<Journey>): Int =
        sufferScore(
            route.longestJourneys(limit = 3),
            Routes.getDepartsFrom(route)
        )

    @JvmStatic
    fun List<Journey>.longestJourneys(limit: Int): List<Journey> =
        sortedByDescending { it.duration }.take(limit)

    fun routesToShowFor(itineraryId: String?): List<List<Journey>> =
        bearable(routesFor(itineraryId))

    private fun bearable(routes: List<List<Journey>>): List<List<Journey>> =
        routes.filter { sufferScoreFor(it) <= 10 }

    private fun sufferScore(
        longestJourneys: List<Journey>,
        start: Location
    ): Int = SOME_COMPLICATED_RESULT()
}
----
++++
<div class="coderef">
    <a class="orm:hideurl" href="https://java-to-kotlin.dev/code-links.html?ref=6.22">Example 6.22 [collections.11:src/main/java/travelator/Suffering.kt]</a> <a class="orm:hideurl print-hide" href="https://java-to-kotlin.dev/code-links.html?diff=6.22">(diff)</a> 
</div>
++++
// end-insert

We say final, but in practice we probably wouldn't finish this refactoring at this point.
Those `List<List<Journey>>` types are hinting at some type trying to get out, and in Kotlin we don't usually publish static methods in an object like this; we prefer top-level function definitions.
<<static-methods-to-top-level-functions>> will fix the latter at least.((("", startref="RjavatoK06")))((("", startref="Crefact06")))

=== Moving On

Java at one time favored programming with mutability.
That has fallen out of vogue, but more by convention than by enforcement.
Kotlin has taken a very pragmatic approach to mutability in its collections, giving smooth operation and a simple programming model, but only where your Java conventions align with its approach.

To((("collections", "assuring smooth interoperation"))) help your Java and Kotlin interoperate smoothly:

* Beware that Java can mutate a collection that it has passed to Kotlin.
* Beware that Java can (at least try to) mutate a collection that it has received from Kotlin.
* Remove mutation from your use of Java collections. Where you can't, take defensive copies.

We have more to say about collections in pass:[<a data-type="xref" data-xrefstyle="chap-num-title" href="#encapsulated-collections-to-typealiases">#encapsulated-collections-to-typealiases</a>].
In terms of this code example, pass:[<a data-type="xref" data-xrefstyle="chap-num-title" href="#static-methods-to-top-level-functions">#static-methods-to-top-level-functions</a>], continues where this chapter leaves off.
