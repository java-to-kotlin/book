[[functions-to-extension-functions]]
== Functions to Extension Functions

Kotlin has a special form of function called an extension function, which is called like a method but is in fact (usually) a free-standing function.
It's easy to convert from a normal function to an extension function, and back, but when should we prefer one to the other?

=== Functions and Methods

Object-oriented programming is the art of solving problems by sending messages to objects.
Want to know the length of `myString`?
Send it a message `myString.length()` asking it.
Want to print that string to the console?
Send it in a message to the `System.out` object: `System.out.println(myString)`.
In a class-based OO language, we define how an object reacts to a message by defining methods on a class.
Methods are bound to a class, and have access to the data (fields) associated with a particular instance.
When we invoke a method, the runtime arranges for the correct version of a method to be called (depending on the runtime type of the object), and for it to have access to instance state.

In functional programming we solve problems by calling functions with values.
We find the length of `myString` by passing it to a `length(myString)` function.
We print to the console with `println(myString)`, and if we wanted to print somewhere else we would pass that to the function: `println(myString, System.err)`.
Functions are not defined _on_ a type, although they may have an intimate relationship with it.

The paradigms have pros and cons, but for now let's just consider discoverability and extensibility.

Let's say that we have a `Customer` type:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#customer
[source,kotlin]
----
data class Customer(
    val id: String,
    val givenName: String,
    val familyName: String
) {
    ...
}
----
// end-insert

This _is_ a class, so straight away we know that we can send messages to ask for the `id`, `givenName` and `familyName`.
What about other operations?
In a class-based system we only have to scroll down to see another message that we can send:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#customerFull
[source,kotlin]
----
data class Customer(
    val id: String,
    val givenName: String,
    val familyName: String
) {
    val fullName get() = "$givenName $familyName"
}
----
// end-insert

Even without looking at the definition, if we have a variable `val customer: Customer`, we can type `customer.` and our IDE will eagerly tell us that we can call `id`, givenName`, `familyName` or `fullName`.
In fact, this auto-complete is in many ways better than looking at the class definition, because it also shows us supertype and other operations (`equals`, `copy` etc) that we would have to navigate to other files to see.

In a functional decomposition, `fullName` would be a function, and we would have to search our codebase for it.
In this case it will be a function where the only argument is of type `Customer`.
It's surprisingly hard to get IntelliJ to help us - "Find Usages" grouped by parameter type will do the job, but it's hardly convenient.
Maybe IDEs for functional languages do a better job, but given that there don't seem to be any IDEs for functional languages, it seems unlikely.
Of course in practice we will expect to find the definition of `Customer` and its fundamental operations close together in the source, perhaps in the same file or at least namespace.

Score one to OO for discoverability then.
What about extensibility?
What happens when we want to add an operation to `Customer`?
Marketing would like to render the name reversed with the `familyName` in upper case.
(You may notice that whenever we need a simple but arbitrary example we blame marketing.)

If we own the code then we can just add a method:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#postalName
[source,kotlin]
----
data class Customer(
    val id: String,
    val givenName: String,
    val familyName: String
) {
    val fullName get() = "$givenName $familyName"
    fun nameForMarketing() = "${familyName.toUpperCase()}, $givenName}"
}
----
// end-insert

If we don't own the code then we can't add a method, and so we have to fall back on a function.
In Java we might have a collection of these static functions in a class called `Marketing`, or `CustomerUtils`.
In Kotlin we can make them top-level functions (see <<static-methods-to-top-level-functions>>), but the principle is the same.

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#nameForMarketing
[source,kotlin]
----
fun nameForMarketing(customer: Customer) =
    "${customer.familyName.toUpperCase()}, $customer.givenName}"
----
// end-insert

What of the functional solution?
Well this is the functional solution too.
So the functional solution is arguably better for extensibility, because extension operations are indistinguishable from those (like `fullName`) provided by the original authors, whereas the OO solution makes us look for two different types of implementation, methods and functions.

Even if we _do_ own the code for the `Customer` class, we should be wary of adding methods like `nameForMarketing`.
The class `Customer` is a fundamental domain class in our application: lots of other code will depend on it.
Adding a report for marketing shouldn't force us to recompile and retest everything, but it will if we add a method.
So it's better that we keep `Customer` as small as possible and add frivolous functionality with external functions.

Those functions don't have to be as hard to find as we've made out though; they can be extension functions.

=== Extension Functions

Extension functions are functions that look like methods, but are in fact just functions.
(As we explore in <<static-methods-to-top-level-functions>>, technically they are _also_ methods on the JVM, because all code has to be.
And they can in fact be non-static methods of another class, we'll get to that later.)

As their name implies, extension functions give us the ability to extend the operations available on a type.
They do this while supporting the intuitive, dot-means-send-a-message calling convention of methods, which allows them to be discoverable in the same Ctrl-Space way.

If we define an extension function:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#nameForMarketingExt
[source,kotlin]
----
fun Customer.nameForMarketing() = "${familyName.toUpperCase()}, $givenName}"
----
// end-insert

then we can call it as if it is a method

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#callingExt
[source,kotlin]
----
val s = customer.nameForMarketing()
----
// end-insert

and IntelliJ will auto-suggest it along with the actual methods.

Java isn't quite so helpful - it just sees the extension function as a static function:

// begin-insert: src/main/java/extensionFunctions/SomeJava.java#callingExt
[source,java]
----
var s = Extension_functionsKt.nameForMarketing(customer); // <1>
----
// end-insert

<1> `Extension_functionsKt` is the name of the class containing our top-level declarations as static methods - see <<static-methods-to-top-level-functions>>.

Interestingly we can't call the function in the same way from Kotlin:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#error
[source,kotlin]
----
nameForMarketing(customer) // <1> doesn't compile
----
// end-insert

<1> `Unresolved reference. None of the following candidates is applicable because of receiver type mismatch:
public fun Customer.nameForMarketing(): String ...`.

_Receiver_ by the way is the name that Kotlin gives to `this` in an extension function.

[TIP]
.Function Types for Methods and Extension Functions
====
While we can't call extension functions as normal functions in Kotlin, we can assign them to normal function references. So the following compiles:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#references
[source,kotlin]
----
val methodReference: (Customer.() -> String) =
    Customer::fullName
val extensionFunctionReference: (Customer.() -> String) =
    Customer::nameForMarketing

val methodAsFunctionReference: (Customer) -> String =
    methodReference
val extensionAsFunctionReference: (Customer) -> String =
    extensionFunctionReference
----
// end-insert

We can invoke these as expected:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#invoke1
[source,kotlin]
----
customer.methodReference()
customer.extensionFunctionReference()

methodAsFunctionReference(customer)
extensionAsFunctionReference(customer)
----
// end-insert

We can also use the _with-receiver_ references as if they took the receiver as the first argument:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#invoke2
[source,kotlin]
----
methodReference(customer)
extensionFunctionReference(customer)
----
// end-insert

We cannot, however, call the plain references as if they had a receiver:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#invoke3
[source,kotlin]
----
customer.methodAsFunctionReference() // <1> doesn't compile
customer.extensionAsFunctionReference() // doesn't compile
----
// end-insert

<1> `Unresolved reference: methodAsFunctionReference`
====

Note that extension functions don't have any special access to the private members of the class that they are extending, they can only have the same priveleges as normal functions in their scope.

=== Extension Properties

Kotlin also supports extension properties.
This is possible because Kotlin property accessors are actually method calls.
Extension properties can't store any data because they don't really add fields to their class - they can only be computed.

`nameForMarketing` could have been defined as an extension property:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#nameForMarketingProp
[source,kotlin]
----
val Customer.nameForMarketing get() = "${familyName.toUpperCase()}, $givenName}"
----
// end-insert

In fact, it probably _should_ be a property, as it is a simple calculation (see <<actions-to-calculations>>) and so always returns the same result.

Unless we specifically distinguish (as we do in <<methods-to-properties>>) discussion around extension functions also applies to extension properties.

[WARNING]
.Extension Functions are Not Polymorphic
====
It's important to note though that while invoking an extension function looks like a method call, it is not, in fact, sending a message to an object.
It is the compile-time type of the reference that is used to select which extension function to call, not the runtime type as with methods.

We'll look at this more in <<methods-to-extension-functions>> and <<open-to-sealed-classes>>.
====

=== Conversions

So far we have examined extension functions for adding operations to a type.
Conversions from one type to another are good application.
Travelator needs to convert customer details to and from JSON and XML.
Let's first consider converting from `JsonNode` to `Customer`.

We could add a constructor, `Customer(jsonNode)` (or a static `Customer` method) that knew how to extract the relevant data, but it really doesn't feel right to pollute our `Customer` class with dependencies on a specific JSON library, and then XML, and then what?
The same argument applies to JsonNode.
Even if we could change its code, pretty soon it would be unmanageable with all the jsonNode.toMyDomainType()` methods.

In Java then, we would write a class of utility functions of the form:

// begin-insert: src/main/java/extensionFunctions/SomeJava.java#toCustomer
[source,java]
----
static Customer toCustomer(JsonNode node) {
        ...
}
----
// end-insert

or Duncan's preference:

// begin-insert: src/main/java/extensionFunctions/SomeJava.java#customerFrom
[source,java]
----
static Customer customerFrom(JsonNode node) {
        ...
}
----
// end-insert

Calling these individually isn't too horrible:

// begin-insert: src/main/java/extensionFunctions/SomeJava.java#calling
[source,java]
----
var customer = customerFrom(node);
var customer2 = toCustomer(node);
----
// end-insert

If we need to combine functions though, things start to go awry:

// begin-insert: src/main/java/extensionFunctions/SomeJava.java#chaining
[source,java]
----
var marketingLength = nameForMarketing(customerFrom(node)).length();
----
// end-insert

We're all developers here, and used to reading function invocations, so it's easy to underestimate the cognitive load of searching for the innermost call and working your way out through function and method calls to work out how an expression evaluates.
In Kotlin, we can write the conversion as an extension on `JsonNode` and enjoy a soothing flow from left to right:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#chaining
[source,kotlin]
----
fun JsonNode.toCustomer(): Customer = SOME_CODE()

val marketingLength = jsonNode.toCustomer().nameForMarketing().length
----
// end-insert

Duncan can literally feel the difference in readability in the tension in his shoulders.

=== Nullability

One major difference between invoking a method and calling a function is in the treatment of `null` references.
If we have a reference that is `null`, we can't send a message to it, because there is nothing to send a message to.
Some runtimes will allow you to pretend by silently ignoring such calls, but not the JVM, which signals its disgust with `NullPointerExceptions`.
In contrast, `null` _parameters_ are tractable.
We may not know what to do with them, but they don't prevent us from finding code to invoke.

It follows that whilst `thing.method()` and `thing.extensionFunction()` look to be equivalent calls, `method` can never be called if `thing` is `null`, whereas `extensionFunction` can.
In order to allow this we have to declare the receiver as nullable.
Here's an example from the code to convert an XML `Element` to a `Customer`.

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#xml
[source,kotlin]
----
fun Element?.toCustomer(): Customer? = this?.let { element ->
    Customer(
        element.attribute("id"),
        element.attribute("first-name"),
        element.attribute("last-name")
    )
}
----
// end-insert

Inside a method, `this` can never be `null`.
Inside an extension function, it can be, so we use `this?.let` create the customer only if the receiver isn't `null`.

Extension functions on nullable types can significantly reduce the noise of properly handling `null` values in Kotlin, again reducing the cognitive load of understanding what our code is doing.

=== Generics

So far we have looked at extension functions defined on concrete types.
Just as with normal functions, they can have generic parameters though.
This is most interesting when the receiver is generic.

Here's a really useful extension function that for some reason isn't part of the standard library.

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#printed
[source,kotlin]
----
fun <T> T.printed(): T = this.also(::println)
----
// end-insert

We can use this when we want to debug the value of an expression in place.
For example, remember this:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#printed2
[source,kotlin]
----
val marketingLength = jsonNode.toCustomer().nameForMarketing().length
----
// end-insert

If we need to see the value of the customer for debugging we would normally need to pull out a variable:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#printed3
[source,kotlin]
----
val customer = jsonNode.toCustomer()
println(customer)
val marketingLength = customer.nameForMarketing().length
----
// end-insert

With `printed` we have a function that prints the value of the receiver and returns it unchanged, so that we can write:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#printed4
[source,kotlin]
----
val marketingLength = jsonNode.toCustomer().printed().nameForMarketing().length
----
// end-insert

which is much less disruption, and easy to search for before we check in.

We can also define extension functions for specialised generic types.

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#familyNames
[source,kotlin]
----
fun Iterable<Customer>.familyNames(): Set<String> =
    this.map(Customer::familyName).toSet()
----
// end-insert

This extension function is applicable to any `Collection<Customer>`, but not to collections of other types.
Extension functions then allow us to use collections to represent domain concepts rather than defining our own types - see <<encapsulated-collections-to-typealiases>>, and for extracting parts of collections pipelines into named sections - see <<TODO>>.

=== Use in the Standard Library

Note that the Kotlin library authors faced the same issue extending types that they don't own as we do - in their case those provided by the Java standard library.
While they sometimes resorted to compiler trickery, a lot of the Kotlin standard library is extension functions.
This includes fundamental functions like `map`, `filter` and `reduce` (defined as extensions on `Iterable`), and the scope functions `let`, `run`, `with`, `apply` and `also`. There is even an extension function `Any?.toString`.

[WARNING]
.toString on Nullable Types
====
Where a method and extension function are both in scope and visible, the compiler will generate a call to the method, not the function.
As we've discussed, a method can never be safely called on a nullable type, but an extension function can.
So Kotlin defines an extension function, the code for which is effectively:

[source,kotlin]
----
fun Any?.toString(): String =
    this?.let { it.toString() }
    ?: "null"
----

This is called if you invoke `toString` on a nullable type:

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#nullableToString
[source,kotlin]
----
val customer: Customer? = SOME_CODE()
val s: String = customer.toString()
----
// end-insert

Here `s` will be either the result of calling the `Customer.toString` method if customer is not `null`, or otherwise the `String` with value `"null"`.
That's a reference pointing to not to `null`, but to the characters "null".

This is a neat trick, but means that you can find variables that you thought would contain the string representation of an object actually set to the string "null".
This lead to hours of gentle debugging - ask us how we know!
====

=== Extension Functions as Methods

We normally define extension functions as top-level functions.
They can, however, be defined inside a class definition.
In this case they can access the members of their own class, but 'extend' another type.

// begin-insert: src/main/java/extensionFunctions/extension-functions.kt#jsonWriter
[source,kotlin]
----
class JsonWriter(
    private val objectMapper: ObjectMapper,
    private val outputStream: OutputStream
) {
    fun writeCustomer(customer: Customer) {
        objectMapper.writer().writeValue(outputStream, customer.toJson())
    }

    fun asJsonString(customer: Customer) =
        objectMapper.writeValueAsString(customer.toJson())

    private fun Customer.toJson(): JsonNode = objectMapper.valueToTree(this)
}
----
// end-insert

Here `Customer.toJson` can access both the `ObjectMapper` and the `Customer` from their respective scopes.
This isn't a technique that we should use too often, but it can simplify code by allowing the simple left-to-right reading of extension functions while hiding details that would complicate things.
In particular, it allows DSLs to hide details (like the `ObjectMapper`) that clients shouldn't be bothered by.

=== Refactoring to Extension Functions

The actual mechanics of converting a static method to an extension are simple - the trick is recognising all the places where extension functions make things better.
Let's work our way through some of Travelator and see how we do.

Those clever people in marketing have come up with a spreadsheet that gives customers a score according to how valuable they are.
They're constantly changing the algorithm, so they don't want to us to automate that, but they do need a summary file produced from the tab-separated file of customer data and scores that they export.
Here are our tests:

// begin-insert: tags/functions-to-extension-methods.0:src/test/java/travelator/marketing/HighValueCustomersReportTests.java
[source,java]
----
class HighValueCustomersReportTests {

    @Test
    public void test() throws IOException {
        List<String> input = List.of(
            "ID\tFirstName\tLastName\tScore\tSpend",
            "1\tFred\tFlintstone\t11\t1000.00",
            "4\tBetty\tRubble\t10\t2000.00",
            "2\tBarney\tRubble\t0\t20.00",
            "3\tWilma\tFlintstone\t9\t0.00"
        );
        List<String> expected = List.of(
            "ID\tName\tSpend",
            "4\tRUBBLE, Betty\t2000.00",
            "1\tFLINTSTONE, Fred\t1000.00",
            "\tTOTAL\t3000.00"
        );
        check(input, expected);
    }

    @Test
    public void emptyTest() throws IOException {
        List<String> input = List.of(
            "ID\tFirstName\tLastName\tScore\tSpend"
        );
        List<String> expected = List.of(
            "ID\tName\tSpend",
            "\tTOTAL\t0.00"
        );
        check(input, expected);
    }

    @Test
    public void emptySpendIs0() {
        assertEquals(
            new CustomerData("1", "Fred", "Flintstone", 0, 0D),
            HighValueCustomersReport.customerDataFrom("1\tFred\tFlintstone\t0")
        );
    }

    private void check(List<String> inputLines, List<String> expectedLines) throws IOException {
        var output = new StringWriter();
        HighValueCustomersReport.generate(
            new StringReader(String.join("\n", inputLines)),
            output
        );
        assertEquals(String.join("\n", expectedLines), output.toString());
    }
}
----
// end-insert

You can see that we haven't gone to town on these, as marketing do have habit of changing their minds, but in essence the report needs to list the customers who have a score of ten or more, sorted by spend, with a final total line.

Here is the code:

// begin-insert: tags/functions-to-extension-methods.0:src/main/java/travelator/marketing/HighValueCustomersReport.java
[source,java]
----
public class HighValueCustomersReport {

    public static void generate(Reader reader, Writer writer) throws IOException {
        List<CustomerData> valuableCustomers = new BufferedReader(reader).lines()
            .skip(1) // header
            .map(line -> customerDataFrom(line))
            .filter(customerData -> customerData.score >= 10)
            .sorted(comparing(customerData -> customerData.score))
            .collect(toList());

        writer.append("ID\tName\tSpend\n");
        for (var customerData: valuableCustomers) {
            writer.append(lineFor(customerData)).append("\n");
        }
        writer.append(summaryFor(valuableCustomers));
    }

    private static String summaryFor(List<CustomerData> valuableCustomers) {
        var total = valuableCustomers.stream()
            .mapToDouble(customerData -> customerData.spend)
            .sum();
        return "\tTOTAL\t" + formatMoney(total);
    }

    static CustomerData customerDataFrom(String line) {
        var parts = line.split("\t");
        double spend = parts.length == 4 ? 0 :
            Double.parseDouble(parts[4]);
        return new CustomerData(
            parts[0],
            parts[1],
            parts[2],
            Integer.parseInt(parts[3]),
            spend
        );
    }

    private static String lineFor(CustomerData customer) {
        return customer.id + "\t" + marketingNameFor(customer) + "\t" +
            formatMoney(customer.spend);
    }

    private static String formatMoney(double money) {
        return String.format("%#.2f", money);
    }

    private static String marketingNameFor(CustomerData customer) {
        return customer.familyName.toUpperCase() + ", " + customer.givenName;
    }
}
----
// end-insert

You can see that this is already a very functional (as opposed to object-oriented) expression of the solution.
This will make it easy to convert to top-level functions, and top-level functions are easy to convert to extension functions.

But first, here is `CustomerData`:

// begin-insert: tags/functions-to-extension-methods.0:src/main/java/travelator/marketing/CustomerData.java
[source,java]
----
class CustomerData {
    public final String id;
    public final String givenName;
    public final String familyName;
    public final int score;
    public final double spend;

    CustomerData(String id, String givenName, String familyName, int score, double spend) {
        this.id = id;
        this.givenName = givenName;
        this.familyName = familyName;
        this.score = score;
        this.spend = spend;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CustomerData that = (CustomerData) o;
        return score == that.score &&
            Double.compare(that.spend, spend) == 0 &&
            id.equals(that.id) &&
            givenName.equals(that.givenName) &&
            familyName.equals(that.familyName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, givenName, familyName, score, spend);
    }
}
----
// end-insert

This isn't trying to represent everything about a customer, just the data we care about for this report, which is why it is package-protected, and why whoever wrote it (it may have been us ;-) just used fields.
I doubt we (I mean, whoever wrote it) would even have bothered with `equals` and `hashCode` had it not been for
the `emptySpendIs0` test.
That `double` for spend looks suspicious too, but it hasn't caused us any problems yet, so we'll suspend our disbelief and just convert the whole thing to a Kotlin data class (see <<beans-to-values>> before we go on.

Normally that would be a really simple job because of the excellent interop, but it turns out that (at the time of writing) the converter cannot believe that anyone would stoop to raw field access, and so it doesn't change Java that accesses, for example `customerData.score` to `customerData.getScore()` to match the Kotlin property definition.
If we just add the getters before converting to Kotlin, our Java will still be reading the fields directly, so that won't help, but luckily there is an "Encapsulate Fields" refactor which will convert all the fields and field accesses in `Customer` to getters.

// begin-insert: tags/functions-to-extension-methods.1:src/main/java/travelator/marketing/CustomerData.java#foo
[source,java]
----
class CustomerData {
    private final String id;
    private final String givenName;
    private final String familyName;
    private final int score;
    private final double spend;

    ...
    @Override
    public int hashCode() {
        return Objects.hash(getId(), getGivenName(), getFamilyName(), getScore(), getSpend());
    }

    public String getId() {
        return id;
    }

    public String getGivenName() {
        return givenName;
    }
    ...
}
----
// end-insert

Now client code is calling the getters:

// begin-insert: tags/functions-to-extension-methods.1:src/main/java/travelator/marketing/HighValueCustomersReport.java#foo
[source,java]
----
private static String lineFor(CustomerData customer) {
    return customer.getId() + "\t" + marketingNameFor(customer) + "\t" +
        formatMoney(customer.getSpend());
}
----
// end-insert

So we can convert `CustomerData` to a Kotlin data class without breaking the Java:

// begin-insert: tags/functions-to-extension-methods.2:src/main/java/travelator/marketing/CustomerData.kt
[source,kotlin]
----
internal data class CustomerData(
    val id: String,
    val givenName: String,
    val familyName: String,
    val score: Int,
    val spend: Double
)
----
// end-insert

Now we can go ahead and convert `HighValueCustomerReport` to Kotlin too - it's entirely self-contained.
That doesn't go brilliantly, `customerDataFrom` doesn't compile after the conversion:

// begin-insert: tags/functions-to-extension-methods.3:src/main/java/travelator/marketing/HighValueCustomersReport.kt#customerDataFrom
[source,kotlin]
----
object HighValueCustomersReport {
    ...
    @JvmStatic
    fun customerDataFrom(line: String): CustomerData { // <1>
        val parts = line.split("\t".toRegex()).toTypedArray()
        val spend: Double = if (parts.size == 4) 0 else parts[4].toDouble() // <2>
        return CustomerData(
            parts[0],
            parts[1],
            parts[2], parts[3].toInt(), // <3>
            spend
        )
    }
    ...
}
----
// end-insert

<1> `'public' function exposes its 'internal' return type CustomerData`.
<2> `The integer literal does not conform to the expected type Double`.
<3> Odd formatting.

This function was package protected to allow the test to access it.
Kotlin doesn't really support package protection, so the converter has chosen public visibility here, but internal for `CustomerData`, and then it complains that it is returning an internal type from a public method.
The simplest solution is just to make them both public.
Maybe these will be fixed by the time you read this.
Similarly, the converter hasn't been smart enough to know that Kotlin doesn't coerce the integer 0 to double, leading to the second error.

On the bright side, if this is the best computers can do, maybe our jobs are safe for a few years yet!
Let's help IntelliJ out by clicking on the errors and Alt-Entering to fix them for it.

// begin-insert: tags/functions-to-extension-methods.4:src/main/java/travelator/marketing/HighValueCustomersReport.kt#customerDataFrom
[source,kotlin]
----
object HighValueCustomersReport {
    ...
    @JvmStatic
    fun customerDataFrom(line: String): CustomerData { // <1>
        val parts = line.split("\t".toRegex()).toTypedArray()
        val spend: Double = if (parts.size == 4) 0.0 else parts[4].toDouble()
        return CustomerData(
            parts[0],
            parts[1],
            parts[2],
            parts[3].toInt(),
            spend
        )
    }
    ...
}
----
// end-insert

<1> Now public

Our functions are currently hosted in an `object` - let's convert them to top level functions (<<static-methods-to-top-level-functions>>).

// begin-insert: tags/functions-to-extension-methods.5:src/main/java/travelator/marketing/HighValueCustomersReport.kt#all
[source,kotlin]
----
@file:JvmName("HighValueCustomersReport")
package travelator.marketing

...

@Throws(IOException::class)
fun generate(reader: Reader?, writer: Writer) {
    val valuableCustomers = BufferedReader(reader).lines()
        .skip(1) // header
        .map { line: String -> customerDataFrom(line) }
        .filter { (_, _, _, score) -> score >= 10 }
        .sorted(Comparator.comparing { (_, _, _, score) -> score })
        .collect(Collectors.toList())
    writer.append("ID\tName\tSpend\n")
    for (customerData in valuableCustomers) {
        writer.append(lineFor(customerData)).append("\n")
    }
    writer.append(summaryFor(valuableCustomers))
}

private fun summaryFor(valuableCustomers: List<CustomerData>): String {
    val total = valuableCustomers.stream()
        .mapToDouble { (_, _, _, _, spend) -> spend }
        .sum()
    return "\tTOTAL\t" + formatMoney(total)
}

fun customerDataFrom(line: String): CustomerData { // <1>
    val parts = line.split("\t".toRegex()).toTypedArray()
    val spend: Double = if (parts.size == 4) 0.0 else parts[4].toDouble()
    return CustomerData(
        parts[0],
        parts[1],
        parts[2],
        parts[3].toInt(),
        spend
    )
}

private fun lineFor(customer: CustomerData): String {
    return customer.id + "\t" + marketingNameFor(customer) + "\t" +
        formatMoney(customer.spend)
}

private fun formatMoney(money: Double): String {
    return String.format("%#.2f", money)
}

private fun marketingNameFor(customer: CustomerData): String {
    return customer.familyName.toUpperCase() + ", " + customer.givenName
}
----
// end-insert

OK, it's time to look for potential and actual extension functions.
Starting at the end is the `marketingNameFor` that we saw (a slightly different version of) earlier.
If we Alt-Enter on the `customer` parameter IntelliJ will offer to "Convert Parameter to Receiver".
This gives:

// begin-insert: tags/functions-to-extension-methods.6:src/main/java/travelator/marketing/HighValueCustomersReport.kt#marketingNameFor
[source,kotlin]
----
private fun lineFor(customer: CustomerData): String {
    return customer.id + "\t" + customer.marketingNameFor() + "\t" +
        formatMoney(customer.spend)
}

...
private fun CustomerData.marketingNameFor(): String {
    return familyName.toUpperCase() + ", " + givenName
}
----
// end-insert

That's now not a great name now - let's rename it to `marketingName`.
Then "Convert function to property", "Convert to expression body" and convert the string concatenation to expansion.

// begin-insert: tags/functions-to-extension-methods.7:src/main/java/travelator/marketing/HighValueCustomersReport.kt#marketingNameFor
[source,kotlin]
----
private fun lineFor(customer: CustomerData): String =
    "${customer.id}\t${customer.marketingName}\t${formatMoney(customer.spend)}"

private fun formatMoney(money: Double): String {
    return String.format("%#.2f", money)
}

private val CustomerData.marketingName: String
    get() = "${familyName.toUpperCase()}, $givenName"
----
// end-insert

Now `formatMoney` is letting us down, again "Convert Parameter to Receiver", rename, and "Convert to expression body":

// begin-insert: tags/functions-to-extension-methods.8:src/main/java/travelator/marketing/HighValueCustomersReport.kt#toMoneyString
[source,kotlin]
----
private fun lineFor(customer: CustomerData): String =
    "${customer.id}\t${customer.marketingName}\t${customer.spend.toMoneyString()}"

private fun Double.toMoneyString() = String.format("%#.2f", this)
----
// end-insert

The `String.format` wrankles a bit.
Kotlin would allow us to write `"%#.2f".format(this)`, but we prefer this:

// begin-insert: tags/functions-to-extension-methods.9:src/main/java/travelator/marketing/HighValueCustomersReport.kt#formattedAs
[source,kotlin]
----
private fun Double.toMoneyString() = this.formattedAs("%#.2f")

private fun Double.formattedAs(format: String) = String.format(format, this)
----
// end-insert

Now `customerDataFrom` is in our sights:

// begin-insert: tags/functions-to-extension-methods.10:src/main/java/travelator/marketing/HighValueCustomersReport.kt#customerDataFor
[source,kotlin]
----
fun customerDataFrom(line: String): CustomerData {
    val parts = line.split("\t".toRegex()).toTypedArray()
    val spend: Double = if (parts.size == 4) 0.0 else parts[4].toDouble()
    return CustomerData(
        parts[0],
        parts[1],
        parts[2],
        parts[3].toInt(),
        spend
    )
}
----
// end-insert

Before we go on, let's observe that `CharSequence.split()`, `String.toRegex()`, `Collection<T>.toTypedArray()`, `String.toDouble()` and `String.toInt()` are all extension functions provided by the Kotlin standard library.

There's a lot to tidy before we go on.
Kotlin has a `CharSequence.split(delimters)` that we can use in place of the regex.
We can inline `spend`, "Add names to call arguments" and convert to a single expression function (see <<multi-to-single-expression-functions>>).

// begin-insert: tags/functions-to-extension-methods.11:src/main/java/travelator/marketing/HighValueCustomersReport.kt#customerDataFor
[source,kotlin]
----
fun customerDataFrom(line: String): CustomerData =
    line.split("\t").let { parts ->
        CustomerData(
            id = parts[0],
            givenName = parts[1],
            familyName = parts[2],
            score = parts[3].toInt(),
            spend = if (parts.size == 4) 0.0 else parts[4].toDouble()
        )
    }
----
// end-insert

Now "Convert Parameter to Receiver", and rename to `toCustomerData`.

// begin-insert: tags/functions-to-extension-methods.12:src/main/java/travelator/marketing/HighValueCustomersReport.kt#customerDataFor
[source,kotlin]
----
fun String.toCustomerData(): CustomerData =
    split("\t").let { parts ->
        CustomerData(
            id = parts[0],
            givenName = parts[1],
            familyName = parts[2],
            score = parts[3].toInt(),
            spend = if (parts.size == 4) 0.0 else parts[4].toDouble()
        )
    }
----
// end-insert

Note that the Java in our tests is still calling this as a static method:

// begin-insert: tags/functions-to-extension-methods.12:src/test/java/travelator/marketing/HighValueCustomersReportTests.java#customerDataFor
[source,java]
----
@Test
public void emptySpendIs0() {
    assertEquals(
        new CustomerData("1", "Fred", "Flintstone", 0, 0D),
        HighValueCustomersReport.toCustomerData("1\tFred\tFlintstone\t0")
    );
}
----
// end-insert

Now

// begin-insert: tags/functions-to-extension-methods.13:src/main/java/travelator/marketing/HighValueCustomersReport.kt#summaryFor
[source,kotlin]
----
private fun summaryFor(valuableCustomers: List<CustomerData>): String {
    val total = valuableCustomers.stream()
        .mapToDouble { (_, _, _, _, spend) -> spend }
        .sum()
    return "\tTOTAL\t" + total.toMoneyString()
}
----
// end-insert

That destructuring is odd, but we can get rid of it by hand-writing the `total` in Kotlin.
We'll remove the concatenation while we're there:

// begin-insert: tags/functions-to-extension-methods.14:src/main/java/travelator/marketing/HighValueCustomersReport.kt#summaryFor
[source,kotlin]
----
private fun summaryFor(valuableCustomers: List<CustomerData>): String {
    val total = valuableCustomers.sumByDouble { it.spend }
    return "\tTOTAL\t${total.toMoneyString()}"
}
----
// end-insert

Now convert to a single expression extension function:

// begin-insert: tags/functions-to-extension-methods.15:src/main/java/travelator/marketing/HighValueCustomersReport.kt#summaryFor
[source,kotlin]
----
private fun List<CustomerData>.summarised(): String =
    sumByDouble { it.spend }.let { total ->
        "\tTOTAL\t${total.toMoneyString()}"
    }
----
// end-insert

Now only `generate` is left unimproved:

// begin-insert: tags/functions-to-extension-methods.16:src/main/java/travelator/marketing/HighValueCustomersReport.kt#generate
[source,kotlin]
----
@Throws(IOException::class)
fun generate(reader: Reader?, writer: Writer) {
    val valuableCustomers = BufferedReader(reader).lines()
        .skip(1) // header
        .map { line: String -> line.toCustomerData() }
        .filter { (_, _, _, score) -> score >= 10 }
        .sorted(Comparator.comparing { (_, _, _, score) -> score })
        .collect(Collectors.toList())
    writer.append("ID\tName\tSpend\n")
    for (customerData in valuableCustomers) {
        writer.append(lineFor(customerData)).append("\n")
    }
    writer.append(valuableCustomers.summarised())
}
----
// end-insert

We still have to convert Java streams to Kotlin sequences by hand:

// begin-insert: tags/functions-to-extension-methods.17:src/main/java/travelator/marketing/HighValueCustomersReport.kt#generate
[source,kotlin]
----
@Throws(IOException::class)
fun generate(reader: Reader, writer: Writer) {
    val valuableCustomers = reader.buffered().lineSequence()
        .drop(1) // header
        .map(String::toCustomerData)
        .filter { it.score >= 10 }
        .sortedBy(CustomerData::score)
        .toList()
    writer.append("ID\tName\tSpend\n")
    for (customerData in valuableCustomers) {
        writer.append(lineFor(customerData)).append("\n")
    }
    writer.append(valuableCustomers.summarised())
}
----
// end-insert

Note here that every link in the sequence chain is an extension function not a method!

`Appendable.appendLine()` is another extension function that allows us to simplify a bit:

// begin-insert: tags/functions-to-extension-methods.18:src/main/java/travelator/marketing/HighValueCustomersReport.kt#generate
[source,kotlin]
----
@Throws(IOException::class)
fun generate(reader: Reader, writer: Writer) {
    val valuableCustomers = reader
        .buffered()
        .lineSequence()
        .drop(1) // header
        .map(String::toCustomerData)
        .filter { it.score >= 10 }
        .sortedBy(CustomerData::score)
        .toList()
    writer.appendLine("ID\tName\tSpend")
    for (customerData in valuableCustomers) {
        writer.appendLine(lineFor(customerData))
    }
    writer.append(valuableCustomers.summarised())
}
----
// end-insert

It feels like we should be able to remove that `// header` comment by extracting a function, but look at what happens if we do:

// begin-insert: tags/functions-to-extension-methods.19:src/main/java/travelator/marketing/HighValueCustomersReport.kt#generate
[source,kotlin]
----
@Throws(IOException::class)
fun generate(reader: Reader, writer: Writer) {
    val valuableCustomers = withoutHeader(reader.buffered().lineSequence())
        .map(String::toCustomerData)
        .filter { it.score >= 10 }
        .sortedBy(CustomerData::score)
        .toList()
    writer.appendLine("ID\tName\tSpend")
    for (customerData in valuableCustomers) {
        writer.appendLine(lineFor(customerData))
    }
    writer.append(valuableCustomers.summarised())
}

private fun withoutHeader(sequence: Sequence<String>) = sequence.drop(1)
----
// end-insert

We've lost the nice pipeline flow from left to right, top to bottom.
Alt-Enter on `sequence` and "Convert Parameter to Receiver" gives it back:

// begin-insert: tags/functions-to-extension-methods.20:src/main/java/travelator/marketing/HighValueCustomersReport.kt#generate
[source,kotlin]
----
@Throws(IOException::class)
fun generate(reader: Reader, writer: Writer) {
    val valuableCustomers = reader.buffered().lineSequence()
        .withoutHeader()
        .map(String::toCustomerData)
        .filter { it.score >= 10 }
        .sortedBy(CustomerData::score)
        .toList()
    writer.appendLine("ID\tName\tSpend")
    for (customerData in valuableCustomers) {
        writer.appendLine(lineFor(customerData))
    }
    writer.append(valuableCustomers.summarised())
}

private fun Sequence<String>.withoutHeader() = drop(1)
----
// end-insert

We can make this even more expressive with a couple more extension members,`Reader.linesAsSequence()`, `Sequence<String>.valuableCustomers()` and `CustomerData.outputLine.
<<TODO>> covers how to extract parts of a pipeline to extensions.

// begin-insert: tags/functions-to-extension-methods.21:src/main/java/travelator/marketing/HighValueCustomersReport.kt#generate
[source,kotlin]
----
@Throws(IOException::class)
fun generate(reader: Reader, writer: Writer) {
    val valuableCustomers = reader
        .linesAsSequence()
        .valuableCustomers()
        .sortedBy(CustomerData::score)
        .toList()
    writer.appendLine("ID\tName\tSpend")
    for (customerData in valuableCustomers) {
        writer.appendLine(customerData.outputLine)
    }
    writer.append(valuableCustomers.summarised())
}

private fun Reader.linesAsSequence() = buffered().lineSequence()

private fun Sequence<String>.valuableCustomers() = withoutHeader()
    .map(String::toCustomerData)
    .filter { it.score >= 10 }
----
// end-insert

This still isn't quite as sweet as we might like - <<TODO>> will finish off this refactoring, we're we've covered the extension function part.
Here's the whole file:

// begin-insert: tags/functions-to-extension-methods.21:src/main/java/travelator/marketing/HighValueCustomersReport.kt#all
[source,kotlin]
----
@Throws(IOException::class)
fun generate(reader: Reader, writer: Writer) {
    val valuableCustomers = reader
        .linesAsSequence()
        .valuableCustomers()
        .sortedBy(CustomerData::score)
        .toList()
    writer.appendLine("ID\tName\tSpend")
    for (customerData in valuableCustomers) {
        writer.appendLine(customerData.outputLine)
    }
    writer.append(valuableCustomers.summarised())
}

private fun Reader.linesAsSequence() = buffered().lineSequence()

private fun Sequence<String>.valuableCustomers() = withoutHeader()
    .map(String::toCustomerData)
    .filter { it.score >= 10 }

private fun Sequence<String>.withoutHeader() = drop(1)

private fun List<CustomerData>.summarised(): String =
    sumByDouble { it.spend }.let { total ->
        "\tTOTAL\t${total.toMoneyString()}"
    }

fun String.toCustomerData(): CustomerData =
    split("\t").let { parts ->
        CustomerData(
            id = parts[0],
            givenName = parts[1],
            familyName = parts[2],
            score = parts[3].toInt(),
            spend = if (parts.size == 4) 0.0 else parts[4].toDouble()
        )
    }

private val CustomerData.outputLine: String
    get() = "$id\t$marketingName\t${spend.toMoneyString()}"

private fun Double.toMoneyString() = this.formattedAs("%#.2f")

private fun Double.formattedAs(format: String) = String.format(format, this)

private val CustomerData.marketingName: String
    get() = "${familyName.toUpperCase()}, $givenName"
----
// end-insert

Note that every function except the entry point is a single-expression (<<multi-to-single-expression-functions>>) extension function.
We haven't made `generate` an extension function because there isn't a natural parameter to make the receiver - it doesn't feel like a natural operation on `Reader` or `Writer`.
Duncan thinks that may change when we finish this refactoring - let's see shall we?

=== Conclusion

TODO when I've read this back.

Use-cases.

1.  Adding a little local expressiveness with private methods like `JsonNode.toAddress()`
2.  Adding methods you wish were available on types that you don't own - `JsonNode.getNonBlankText(name: String)`
3.  Keeping your own classes small by defining operations as extension functions rather than actual methods - `AccessType.toUIString()`

Reference <<methods-to-extension-functions>>, <<methods-to-properties>>, <<encapsulated-collections-to-typealiases>>, <<explaining-variables-to-extension-functions>>,
