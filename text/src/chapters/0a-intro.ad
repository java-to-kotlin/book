[[introduction]]
== Introduction

We're writing this book for people who are in the same situation now as we were when we first adopted Kotlin.

We expect you're an experienced programmer who knows Java and the Java ecosystem well, as well as a number of other languages.
You've learned the basics of Kotlin, and you recognise to get the best out of the language you will need to design your systems differently.
Some designs that are cumbersome in Java are much easier to achieve in Kotlin.
Conversely, Kotlin deliberately removes some features of Java (such as checked exceptions) and de-emphasizes others (such as reflection).
You don't want to end up merely writing Java code in Kotlin syntax.

You have skin in the game.
Maybe you're in a technical leadership position or have successfully convinced your team to adopt Kotlin.
You've spent some political capital to get Kotlin into the project.
Now you need to ensure that the transition goes smoothly and doesn't destabilise the existing, business critical Java code you are responsible for.

This book is not an introduction to Kotlin language features.
Instead, we explore how to adapt your design approach to take advantage of those features, and how you can do so safely in a mixed Java/Kotlin codebase by refactoring to Kotlin.
