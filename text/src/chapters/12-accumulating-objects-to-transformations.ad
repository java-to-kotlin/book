[[accumulating-objects-to-transformations]]
== Accumulating Objects to Transformations

Java programs usually rely heavily on mutable state, because it is so arduous in Java to define value types and transform values, even with the Streams API.
What is the best way to translate Java code that relies upon mutable objects and side effects to Kotlin code that transforms immutable values?

=== Calculating with Accumulator Parameters

One of the most important things our travellers want to know is how much their adventures will cost.
International travel makes this rather complicated.
A trip will incur costs in multiple currencies as it wends its way across borders, but the traveller wants to be able to compare overall costs to make decisions about routes and where to stay.
So Travelator summarises costs by local currency _and_ the traveller's preferred currency, and then shows the overall total in the preferred currency.
It does this using the `CostSummary` and `CostSummaryCalculator` classes.
Let's take a look at how they are used, and then we'll look at their implementation.

The `Itinerary` class has an operation for summarising its costs with a `CostSummaryCalculator`.
It is used like this:

[[cost-summary-calculator-usage]]
// begin-insert: tags/accumulator.0:src/test/java/travelator/itinerary/Itinerary_CostTest.kt#calculation
[source,kotlin]
----
val fx: ExchangeRates = ...

val userCurrency = ...

val calculator = CostSummaryCalculator(userCurrency, fx) // <1>

fun costSummary(i: Itinerary): CostSummary {
    i.addCostsTo(calculator) // <2>
    return calculator.summarise() // <3>
}
----
// end-insert

<1> Here the code creates a `CostSummaryCalculator` with the traveller's preferred currency and a source of currency exchange rates.
<2> This tells the `Itinerary` to add its costs to the calculator.  In response, the `Itinerary` adds the cost of its elements: the journeys along the route, accommodation, and other chargeable services.
<3> This calls the calculator's `summarise` method to obtain the `CostSummary`, after all the costs have been collected.

Someone has already converted the `Itinerary` class to Kotlin, but the implementation of `addCostsTo` still has a Java flavour:

// begin-insert: tags/accumulator.0:src/main/java/travelator/itinerary/Itinerary.kt#costs
[source,kotlin]
----
data class Itinerary(
    val id: Id<Itinerary>,
    val route: Route,
    val accommodations: List<Accommodation> = emptyList()
) {
    ...

    fun addCostsTo(calculator: CostSummaryCalculator) {
        route.addCostsTo(calculator)
        accommodations.addCostsTo(calculator)
    }

    ...
}

fun Iterable<Accommodation>.addCostsTo(calculator: CostSummaryCalculator) {
    forEach { a ->
        a.addCostsTo(calculator)
    }
}
----
// end-insert

The logic relies upon side effects to accumulate costs in the mutable state of the `CostSummaryCalculator`.

The benefit of this design is that we can use the calculator to summarise the costs of any object in our domain model, without knowing the structure of that object.
The object is responsible for adding costs to the calculator and passing the calculator to its sub-objects so that they can add _their_ costs.
This decouples the code that needs the costs from the code that provides the costs, allowing us to evolve them independently.

For example, a `Route` contains a list of `Journey`, each of which has a cost, and `Accommodation` has a room rate, a number of nights, and additional costs such as meals and hotel services.  The `Itinerary` doesn't know or care how these objects are structured or how to collect their respective costs:  that is encapsulated in the `Route` and `Accomodation` classes.

However, our use of mutable state has two significant disadvantages.

First, it introduces the possibility of https://martinfowler.com/bliki/AliasingBug.html[aliasing errors].
Aliasing errors create "spooky action at a distance" (as Einstein famously described quantum entanglement) that is not immediately obvious from the source code.
We saw an example in <<java-to-kotlin-collections>>, when a function sorted a mutable list parameter and broke its caller.

In the case of the `CostSummaryCalculator`,  if we reuse a calculator to summarise the costs of multiple entities, we have to reset its state between each calculation.
If we do not reset the calculator state, costs collected during one calculation will be included in the next.
The type system cannot help us avoid this mistake.

The example at the start of this chapter_may_ make this error.
The calculator is not local to the `costSummary` method, and `costSummary` does not reset the calculator before each calculation.
We can't tell if this is a problem or not merely by looking at the `costSummary` method.
We have to understand how that method is used in its wider context, and as we make changes in that context, we have to make sure those changes do not break our assumptions about how the `costSummary` method is used.

The second problem with mutable state is that it scatters the implementation of our algorithms across the code.
We'll return to this later in this chapter.

Before we look at `CostSummaryCalculator`, let's have a look at the `CostSummary` that it computes:

// begin-insert: tags/accumulator.0:src/main/java/travelator/itinerary/CostSummary.java
[source,java]
----
public class CostSummary {
    private final List<CurrencyConversion> lines = new ArrayList<>();
    private Money total;

    public CostSummary(Currency userCurrency) {
        this.total = Money.of(0, userCurrency);
    }

    public void addLine(CurrencyConversion line) {
        lines.add(line);
        total = total.add(line.getToMoney());
    }

    public List<CurrencyConversion> getLines() {
        return List.copyOf(lines);
    }

    public Money getTotal() {
        return total;
    }
}
----
// end-insert

A `CostSummary` is a mutable POJO (as described in <<beans-to-values>>) that holds a list of `CurrencyConversion`s, from local currencies to the traveller's preferred currency.
It also reports the total cost in the preferred currency.
It stores the total cost in a field rather than calculating it in `getTotal` because the application often sorts items by their `CostSummary.total`, and recalculating every comparison turned out to be a bottleneck.
This means that a `CostSummary` has to update the total whenever a `CurrencyConversion` is added.

`CostSummary` is also effectively a shared mutable collection.
As this breaks our rule of thumb in <<dont-mutate-shared-collections>>, it performs a copy in `getLines` to limit the damage.

Now to `CostSummaryCalculator`.
It keeps a running total for each `Currency` in `currencyTotals` when `addCost` is called.
The `summarise` method constructs a `CostSummary` using a source of exchange rates to convert local costs to the traveller's preferred currency:

// begin-insert: tags/accumulator.0:src/main/java/travelator/itinerary/CostSummaryCalculator.java
[source,java]
----
public class CostSummaryCalculator {
    private final Currency userCurrency;
    private final ExchangeRates exchangeRates;
    private final Map<Currency, Money> currencyTotals = new HashMap<>();

    public CostSummaryCalculator(
        Currency userCurrency,
        ExchangeRates exchangeRates
    ) {
        this.userCurrency = userCurrency;
        this.exchangeRates = exchangeRates;
    }
    
    public void addCost(Money cost) {
        currencyTotals.merge(cost.getCurrency(), cost, Money::add);
    }

    public CostSummary summarise() {
        var totals = new ArrayList<>(currencyTotals.values());
        totals.sort(comparing(m -> m.getCurrency().getCurrencyCode()));

        CostSummary summary = new CostSummary(userCurrency);
        for (var total : totals) {
            summary.addLine(exchangeRates.convert(total, userCurrency));
        }

        return summary;
    }

    public void reset() {
        currencyTotals.clear();
    }
}
----
// end-insert

Thus, the calculation of a `CostSummary` is spread between two classes that intertwine the following responsibilities:

* Hold information from the context of the calculation that is needed to compute the summary
* Calculate per-currency totals, so the calculation doesn't accumulate rounding errors
* Convert costs to the traveller's preferred currency
* Calculate the grand total in the traveller's preferred currency
* Sort the currency conversions in alphabetical order of the original currency code
* Store the currency conversions and grand total, so they can be displayed to the traveller.

Such commingling of responsibilities across classes is common when we compute by mutating shared state.
We'd like to disentangle the responsibilities and simplify the implementation - what final structure we should we aim for?

One clue is in the name of the `CostCurrencyCalculator` class.
In linguistic jargon, the `CostCurrencyCalculator` is an _agent noun_ -- a noun derived from a verb that means no more than a thing that performs the action identified by the verb, like _driver_ or _baker_ or _calculator_.
`CostCurrencyCalculator` is a "doer class".

Another clue is in the data that the class holds.
The traveller's preferred currency and source of exchange rates are the context for the calculation.
They are managed elsewhere in the application and held by `CostCurrencyCalculator` so that they are close at hand for its calculations.
The map of totals by currency (`currencyTotals`) contains transient, intermediate results of the calculation that are irrelevant after the calculation is complete, and in fact should be discarded to avoid aliasing errors.
The class doesn't _own_ any data, only holds it temporarily for operational reasons.

The `CostCurrencyCalculator` class doesn't represent a _concept_ in our application domain model, but a _function_ that we perform upon elements of that domain model.
In Kotlin, we usually implement functions not with objects but with, well, functions.

Let's refactor the calculation from mutable classes to functions that work with immutable data.

=== Refactoring to Functions over Immutable Data

Converting the two classes to Kotlin leaves us with "Java in Kotlin syntax".
Here is `CostSummary`, after a little tidying and rearranging:

// begin-insert: tags/accumulator.1:src/main/java/travelator/itinerary/CostSummary.kt
[source,kotlin]
----
class CostSummary(userCurrency: Currency) {
    private val _lines = mutableListOf<CurrencyConversion>()

    var total: Money = Money.of(0, userCurrency)
        private set

    val lines: List<CurrencyConversion>
        get() = _lines.toList()

    fun addLine(line: CurrencyConversion) {
        _lines.add(line)
        total += line.toMoney
    }
}
----
// end-insert

We have fettled the automatic conversion less for `CostSummaryCalculator`:

// begin-insert: tags/accumulator.1:src/main/java/travelator/itinerary/CostSummaryCalculator.kt
[source,kotlin]
----
class CostSummaryCalculator(
    private val userCurrency: Currency,
    private val exchangeRates: ExchangeRates
) {
    private val currencyTotals = mutableMapOf<Currency, Money>()

    fun addCost(cost: Money) {
        currencyTotals.merge(cost.currency, cost, Money::add)
    }

    fun summarise(): CostSummary {
        val totals = ArrayList(currencyTotals.values)
        totals.sortWith(comparing { m: Money -> m.currency.currencyCode })

        val summary = CostSummary(userCurrency)
        for (total in totals) {
            summary.addLine(exchangeRates.convert(total, userCurrency))
        }
        return summary
    }

    fun reset() {
        currencyTotals.clear()
    }
}
----
// end-insert

We can start from here and refactor away the mutability.
We'll work from the inside, by making `CostSummary` an immutable value type, and gradually push immutability outwards through the `CostSummaryCalculator`.
Before we do though, we've been stung by Java's obsession with sorting collections in place before now, so we fix that first:

// begin-insert: tags/accumulator.1.5:src/main/java/travelator/itinerary/CostSummaryCalculator.kt#summarise
[source,kotlin]
----
fun summarise(): CostSummary {
    val totals = currencyTotals.values.sortedBy {
        it.currency.currencyCode
    }
    val summary = CostSummary(userCurrency)
    for (total in totals) {
        summary.addLine(exchangeRates.convert(total, userCurrency))
    }
    return summary
}
----
// end-insert

Now we see a pattern that is common in mutating code - create an object, call some initialisation steps and then return it.
Whenever we see initialisation steps like this we should reach for `apply`.

// begin-insert: tags/accumulator.1.6:src/main/java/travelator/itinerary/CostSummaryCalculator.kt#summarise
[source,kotlin]
----
fun summarise(): CostSummary {
    val totals = currencyTotals.values.sortedBy {
        it.currency.currencyCode
    }
    val summary = CostSummary(userCurrency).apply {
        for (total in totals) {
            addLine(exchangeRates.convert(total, userCurrency))
        }
    }
    return summary
}
----
// end-insert

`apply` allows us to group the initialisation steps into a block to better express our intent.
It's like a mini builder - the `summarise` function never sees a reference to a partially-initialised `CostSummary`; only the completed object.

This is small-scale functional thinking - trying to limit the scope of mutation even within a function.
Functional thinking also helps us to see that looping over `totals`, creating a `CurrencyConversion` for each, and calling `addLine` with it, is the same as creating a list of conversions and looping over that:

// begin-insert: tags/accumulator.1.7:src/main/java/travelator/itinerary/CostSummaryCalculator.kt#summarise
[source,kotlin]
----
fun summarise(): CostSummary {
    val conversions = currencyTotals.values.sortedBy {
        it.currency.currencyCode
    }.map { exchangeRates.convert(it, userCurrency) }

    return CostSummary(userCurrency).apply {
        conversions.forEach(this::addLine)
    }
}
----
// end-insert

Why make this change?
Well we want to strip building a `CostSummary` down to its essence, and that doesn't include calculating the conversions.
Why strip it down to its essence?
Because we are looking for what its constructor should look like.
If `CostSummary` was immutable, client code would have to pass the list of lines to its constructor instead of calling its `addLine` method.
We can baby-step our way there by adding a secondary constructor that duplicates the initialisation logic that we just wrote in the `apply` block:

// begin-insert: tags/accumulator.2:src/main/java/travelator/itinerary/CostSummary.kt
[source,kotlin]
----
class CostSummary(userCurrency: Currency) {
    private val _lines = mutableListOf<CurrencyConversion>()

    var total: Money = Money.of(0, userCurrency)
        private set

    val lines: List<CurrencyConversion>
        get() = _lines.toList()

    constructor(
        userCurrency: Currency,
        lines: List<CurrencyConversion>
    ): this(userCurrency) {
        lines.forEach(::addLine)
    }

    fun addLine(line: CurrencyConversion) {
        _lines.add(line)
        total += line.toMoney
    }
}
----
// end-insert

Now we can change the `CostSummaryCalculator.summarise` method to call the new constructor: treating the `CostSummary` class as if it was an immutable value type.

// begin-insert: tags/accumulator.2:src/main/java/travelator/itinerary/CostSummaryCalculator.kt#summarise
[source,kotlin]
----
fun summarise(): CostSummary {
    val conversions = currencyTotals.values.sortedBy {
        it.currency.currencyCode
    }.map { exchangeRates.convert(it, userCurrency) }

    return CostSummary(userCurrency, conversions)
}
----
// end-insert

This in turn allows us to make the `CostSummary` class actually immutable, at least from outside:

// begin-insert: tags/accumulator.2.1:src/main/java/travelator/itinerary/CostSummary.kt
[source,kotlin]
----
class CostSummary(
    userCurrency: Currency,
    val lines: List<CurrencyConversion>
) {

    var total: Money = Money.of(0, userCurrency)
        private set

    init {
        lines.forEach {
            total += it.toMoney
        }
    }
}
----
// end-insert

As we can see from that nasty `var` and `init`, it's sometimes hard to get away from mutation once it has set in, especially for accumulators like this.
`fold` is our friend here.
We had a series of actions (<<actions>>) acting on the mutable variable `total`.
`fold` converts the actions to a single calculation <<calculations>> that we can use to initialise an immutable variable:

// begin-insert: tags/accumulator.3:src/main/java/travelator/itinerary/CostSummary.kt
[source,kotlin]
----
class CostSummary(
    userCurrency: Currency,
    val lines: List<CurrencyConversion>
) {
    val total = lines
        .map { it.toMoney }
        .fold(Money.of(0, userCurrency), Money::add)
}
----
// end-insert

Now that it is fully immutable, we can make `CostSummary` a data class, if we can make `total` a primary constructor parameter.
We could do this by converting the current constructor to a secondary constructor, but instead we are going to move all the calculation into the `CostSummaryCalculator`, leaving the `CostSummary` merely to hold the results of that calculation.

To do this, we first select the expression to the right of the equals sign in the definition of the `total` property, and use the IDE's "Introduce Parameter" refactoring to push the expression out as a constructor parameter:

// begin-insert: tags/accumulator.4:src/main/java/travelator/itinerary/CostSummary.kt
[source,kotlin]
----
class CostSummary(
    val lines: List<CurrencyConversion>,
    total: Money
) {
    val total = total
}
----
// end-insert

The `total` property is now highlighted as a style warning - the IDE detected that the property can be declared in the constructor parameter.
A quick Alt-Enter on the warning leaves the class declaration as:

// begin-insert: tags/accumulator.5:src/main/java/travelator/itinerary/CostSummary.kt
[source,kotlin]
----
class CostSummary(
    val lines: List<CurrencyConversion>,
    val total: Money
)
----
// end-insert

Meanwhile, back at the `CostSummaryCalculator`, IntelliJ has pulled the calculation into `summarise`, leaving it looking like this:

// begin-insert: tags/accumulator.5:src/main/java/travelator/itinerary/CostSummaryCalculator.kt#summarise
[source,kotlin]
----
fun summarise(): CostSummary {
    val lines = currencyTotals.values
        .sortedBy { it.currency.currencyCode }
        .map { exchangeRates.convert(it, userCurrency) }

    val total = lines
        .map { it.toMoney }
        .fold(Money.of(0, userCurrency), Money::add)

    return CostSummary(lines, total)
}
----
// end-insert

_Now_ we can make `CostSummary` a data class.
Its sole responsibility is to hold the results of the calculation for filtering, sorting and display.

// begin-insert: tags/accumulator.6:src/main/java/travelator/itinerary/CostSummary.kt
[source,kotlin]
----
data class CostSummary(
    val lines: List<CurrencyConversion>,
    val total: Money
)
----
// end-insert

We said previously that mutable state can obscure algorithms by smearing them through the code.
We can now look back and see that was the case with `CostSummary`.
When we arrived, calculating the total was split into initialising a mutable `total` property and updating it in the `addLine` method:

// begin-insert: tags/accumulator.1:src/main/java/travelator/itinerary/CostSummary.kt
[source,kotlin]
----
class CostSummary(userCurrency: Currency) {
    private val _lines = mutableListOf<CurrencyConversion>()

    var total: Money = Money.of(0, userCurrency)
        private set

    val lines: List<CurrencyConversion>
        get() = _lines.toList()

    fun addLine(line: CurrencyConversion) {
        _lines.add(line)
        total += line.toMoney
    }
}
----
// end-insert

Now the calculation is a single expression in `summarise`:

// begin-insert: tags/accumulator.5:src/main/java/travelator/itinerary/CostSummaryCalculator.kt#total
[source,kotlin]
----
val total = lines
    .map { it.toMoney }
    .fold(Money.of(0, userCurrency), Money::add)
----
// end-insert

Similarly, whatever is happening with currencies is still hidden in the remaining mutations in `CostSummaryCalculator`.
We can apply a similar process to eliminate these, but this time we won't add a secondary constructor.
Instead, we will apply <<expand-contract>>, by adding an overload of the `summarise` method that takes the costs, calls `addCost` for each one, and then returns the result of the original `summarise` method.
Then we will move our callers to the new method, deleting the old `summarise` when they are all migrated.
Here's the new overload:

// begin-insert: tags/accumulator.7:src/main/java/travelator/itinerary/CostSummaryCalculator.kt#summarise_overload
[source,kotlin]
----
fun summarise(costs: Iterable<Money>): CostSummary {
    reset()
    costs.forEach(::addCost)
    return summarise()
}
----
// end-insert

This draws a distinction between the _context_ of cost-summary calculations, which we pass to the constructor (`userCurrency` and `exchangeRates`), and the parameters of a _specific_ calculation (the `costs` which we pass to the `summarise` method).

To switch over to using the new `summarise` method, we'll have to extract the costs from the entities we want to summarise, rather than telling them to add their costs to a mutable calculator that we pass in.
Instead of asking children to add their costs to the `CostSummaryCalculator`, parents will ask their children for their costs and combine them.

We'll end up using the calculator like this:

// begin-insert: tags/accumulator.8:src/test/java/travelator/itinerary/Itinerary_CostTest.kt#calculation
[source,kotlin]
----
val fx: ExchangeRates = ...
val userCurrency = ...

val calculator = CostSummaryCalculator(userCurrency, fx)

fun costSummary(i: Itinerary) =
    calculator.summarise(i.costs())
----
// end-insert

And we'll report the costs from our domain models like this:

// begin-insert: tags/accumulator.8:src/main/java/travelator/itinerary/Itinerary.kt#costs
[source,kotlin]
----
data class Itinerary(
    val id: Id<Itinerary>,
    val route: Route,
    val accommodations: List<Accommodation> = emptyList()
) {
    ...

    fun costs() =
        route.costs() + accommodations.costs()

    ...
}

fun Iterable<Accommodation>.costs() =
    flatMap { it.costs() }
----
// end-insert

When all uses of `CostSummaryCalculator` in the application are using our new `summarise` method, we can move the calculation of the `currencyTotals` and `CostSummary` into that method.
Here's the whole class before we start:

// begin-insert: tags/accumulator.8:src/main/java/travelator/itinerary/CostSummaryCalculator.kt
[source,kotlin]
----
class CostSummaryCalculator(
    private val userCurrency: Currency,
    private val exchangeRates: ExchangeRates
) {
    private val currencyTotals = mutableMapOf<Currency, Money>()

    fun summarise(costs: Iterable<Money>): CostSummary {
        reset()
        costs.forEach(::addCost)
        return summarise()
    }

    fun addCost(cost: Money) {
        currencyTotals.merge(cost.currency, cost, Money::add)
    }

    fun summarise(): CostSummary {
        val lines = currencyTotals.values
            .sortedBy { it.currency.currencyCode }
            .map { exchangeRates.convert(it, userCurrency) }

        val total = lines
            .map { it.toMoney }
            .fold(Money.of(0, userCurrency), Money::add)

        return CostSummary(lines, total)
    }

    fun reset() {
        currencyTotals.clear()
    }
}
----
// end-insert

The state required to calculate the `CostSummary` is currently accumulated in the `currencyTotals` map, and read in the no-arguments overload of `summarise`.
Let's recreate the algorithm inside the new `summarise` by using local variables instead:

// begin-insert: tags/accumulator.8.5:src/main/java/travelator/itinerary/CostSummaryCalculator.kt#summarise_overload
[source,kotlin]
----
fun summarise(costs: Iterable<Money>): CostSummary {
    val currencyTotals = mutableMapOf<Currency, Money>()
    costs.forEach {
        currencyTotals.merge(it.currency, it, Money::plus)
    }
    val lines = currencyTotals.values
        .sortedBy { it.currency.currencyCode }
        .map { exchangeRates.convert(it, userCurrency) }
    val total = lines
        .map { it.toMoney }
        .fold(Money(0, userCurrency), Money::add)
    return CostSummary(lines, total)
}
----
// end-insert

Our tests still pass, and IntelliJ tells us that all the other methods of `CostSummaryCalculator` are now unused, as is the `currencyTotals` field, so by deleting them all we have finally succeeded in removing all the mutable state from the class.
Not from that method though - we still have a mutable map!
This is the last remnant of the smearing out of the algorithm that we mentioned earlier.
We have finally bought all the logic into this one method.
And because all our logic is in one place, we know that it happens at one time, and is safe to refactor to any equivalent form.

What is that form?
We have to think about that, but come to the conclusion that the `MutableMap.merge` is accumulating a total per currency.
When we have all the data at once, as we do now, we can perform the same calculation by grouping by currency and summing the lists:

// begin-insert: tags/accumulator.9:src/main/java/travelator/itinerary/CostSummaryCalculator.kt#summarise_overload
[source,kotlin]
----
fun summarise(costs: Iterable<Money>): CostSummary {
    val currencyTotals = costs
        .groupBy { it.currency }
        .values
        .map { moneys -> moneys.reduce(Money::add) }
    val lines = currencyTotals
        .sortedBy { it.currency.currencyCode }
        .map { exchangeRates.convert(it, userCurrency) }
    val total = lines
        .map { it.toMoney }
        .fold(Money(0, userCurrency), Money::add)
    return CostSummary(lines, total)
}
----
// end-insert

It is a bit irritating that we have to use `reduce` to sum moneys instead of having a nice `Iterable<Money>.sum()` extension function - we should probably fix that.
And now that the calculation is all in one place we might ponder whether there is meaning in the fact that we use `reduce` in one expression and `fold` in another (hint, there is), but these are thoughts that we can have only because the code is now set out in one place.

The key thing is that we can see the shape of the `summarise` calculation more clearly now.
It is a pure function that is applied to a collection of costs, and is evaluated in the context of some exchange rates and the traveller's preferred currency.
The function transforms the nested entities of our domain model into a flat collection of costs, then transforms the costs into a map of the total for each currency, transforms the totals for each currency into a list of currency conversions, and finally transforms the list of currency conversions into a `CostSummary`.

[TIP]
====
A functional program transforms its inputs into outputs.

If you can't write that easily in one step, transform the inputs into an intermediate representation that is easy to transform into the outputs.

Introduce intermediate forms and transformations until you have a pipeline of simple transformations between intermediate forms that compose to transform the inputs that you _have_ to the outputs that you _want_.
====

We will look more at pure functions evaluated in context in <<interfaces-to-functions>>.

=== Enriching the Abstraction We Discovered

Travelator does more with exchange rates and the traveller's preferred currency than summarise costs.
For example, while the user is browsing hotel rooms, it shows the cost of each room in both local and preferred currencies.
That is, the hotel room browser performs a currency conversion on an individual cost.
The `CostSummaryCalculator` also has to perform currency conversions on individual costs in order to calculate a summary.
If we extract that functionality as a public method, which we can call `toUserCurrency`, we can initialise the hotel room browser with a `CostSummaryCalculator` instead of passing it both the exchange rates and preferred currency.
We can also remove the currency conversion calculation -- that we now see is duplicated code -- from the hotel room browser.

At that point, the class is no longer a calculator of cost summaries -- it holds the context for any pricing we do for an individual traveller.
So let's rename it to reflect its new-found responsibility.
At the moment, we can't think of a better name than `PricingContext`, which leaves our class looking like this:

// begin-insert: tags/accumulator.11:src/main/java/travelator/itinerary/PricingContext.kt
[source,kotlin]
----
class PricingContext(
    private val userCurrency: Currency,
    private val exchangeRates: ExchangeRates
) {
    fun toUserCurrency(it: Money) =
        exchangeRates.convert(it, userCurrency)

    fun summarise(costs: Iterable<Money>): CostSummary {
        val currencyTotals = costs
            .groupBy { it.currency }
            .values
            .map {
                it.sumOrNull() ?: error("Unexpected empty list")
            }
        val lines = currencyTotals
            .sortedBy { it.currency.currencyCode }
            .map(::toUserCurrency)
        val total = lines
            .map { it.toMoney }
            .sum(userCurrency)
        return CostSummary(lines, total)
    }
}
----
// end-insert

.Naming
****
The name is a bit too generic for our tastes, but will do until we think of something better.
At least it's not misleading.
Renames are cheap, even in a mixed Java/Kotlin codebase, so a small incremental improvement is better than no improvement.
****

This leaves the code that used to use the `CostSummaryCalculator` looking like this:

// begin-insert: tags/accumulator.11:src/test/java/travelator/itinerary/Itinerary_CostTest.kt#calculation
[source,kotlin]
----
val fx: ExchangeRates = ...
val userCurrency = ...

val pricing = PricingContext(userCurrency, fx)

fun costSummary(i: Itinerary) =
    pricing.summarise(i.costs())
----
// end-insert

Now we have this concept in our codebase, we can identify other parts of our application that can use it.
We can move logic from those parts onto the `PricingContext`, making it a one-stop shop for operations that need to convert monetary amounts into the traveller's preferred currency.
And should it end up full of disparate methods for different use cases, then we can move the operations from methods to extension functions to keep them closer to where they are needed, see <<functions-to-extension-functions>>.

=== Conclusion

We started this chapter with a calculation that relied on shared, mutable state.
It duplicated logic from the standard library and introduced the risk of aliasing errors.
By the end of the chapter, we had refactored the same calculation to a transformation of immutable data.

To do so, we moved mutation out of our code in two directions: outwards and inwards.
Outwards was obvious: we made the `CostSummaryCalculator` treat the `CostSummary` class as an immutable value type and then made `CostSummary` immutable, then we made users of `CostSummaryCalculator` treat it as an immutable context to a calculation, and then made `CostSummaryCalculator` immutable.
But inwards?
We replaced the imperative code that mutated collections and fields with calls to standard higher-order functions, like `groupingBy`, `fold` and `reduce`.
Under the hood those functions may mutate state, but they hide that mutation from their callers.
From outside, the functions are calculations <<calculations>>.

We can use the same approach in our own code when we need to.
Sometimes mutating a collection is the easiest thing to do.
The standard library does not always have a higher-order function that tranforms data the way we want.
If we do need a mutable collection, we can hide that mutation inside a referentially transparent function to limit the blast-radius of any potential aliasing errors.
However, every release adds more functions to the standard library, so the need diminishes over time.

Functional programming does not eliminate mutable state but instead _makes it the responsibility of the runtime_.
A functional program declares what the runtime should calculate, and lets the runtime be responsible for computing that calculation.
Kotlin is not a pure functional language, but we benefit by following that principle where we can.
