= Why _Refactoring_ to Kotlin?

You probably won't be able to dedicate time solely to porting your Java code to idiomatic Kotlin. You’ll have to work incrementally, porting parts of your codebase to Kotlin as you continue to add features to the system, maintaining a mixed Java/Kotlin codebase as you do so. Luckily Kotlin’s tooling supports this exceptionally well, and our experience is that you soon see enough productivity benefits from Kotlin that the effort pays for itself.

TODO: more on refactoring to _idiomatic_ Kotlin style.

That leaves the question of where to start the conversion effort.
