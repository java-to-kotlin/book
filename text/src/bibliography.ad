[[bibliography]]
[appendix]
== Bibliography


[[bibliography-kotlin]]
=== Learning Kotlin

[reftext="_Atomic Kotlin_"]
[[ES_AK_2021]]
Bruce Eckel and Svetlana Isakova.
_Atomic Kotlin_.
Mindview.
2021.
ISBN 978-0981872551.

[reftext="_Head First Kotlin_"]
[[GG_HFK_2019]]
Dawn Griffiths and David Griffiths.
_Head First Kotlin_.
O'Reilly Media, Inc.
2019.
ISBN 978-1491996690.

[reftext="_Programming Kotlin_"]
[[S_PK_2019]]
Venkat Subramaniam.
_Programming Kotlin_.
Pragmatic Bookshelf.
2019.
ISBN 978-1680506358.


[[bibliography-testing]]
=== Testing and Test-Driven Development

[reftext="_Test-Driven Development By Example_"]
[[B_TDDBE_2002]]
Kent Beck.
_Test Driven Development By Example_.
Addision-Wesley Professional.
2002.
ISBN 978-0321146533.

[reftext="_Growing Object-Oriented Software Guided By Tests_"]
[[FP_GOOSGBT_2009]]
Steve Freeman and Nat Pryce.
_Growing Object-Oriented Software Guided by Tests_.
Addison-Wesley Professional.
2009.
ISBN 978-0321503626.

[reftext="_JUnit in Action, Third Edition_"]
[[T_JIA_2021]]
Catalin Tudose.
_JUnit in Action, Third Edition_.
Manning Publications.
2021.
ISBN 978-1617297045


[[bibliography-legacy]]
=== Working with Legacy Code

[reftext="_The Mikado Method_"]
[[EB_TMM_2014]]
Ola Ellnestam and Daniel Brolund.
_The Mikado Method_.
Manning Publications.
2014.
ISBN 978-1617291210.

[reftext="_Working Effectively with Legacy Code_"]
[[F_WEWLC_2004]]
Michael Feathers.
_Working Effectively with Legacy Code_.
Prentice Hall.
2004.
ISBN 978-0131177055.

[reftext="_Object-Oriented Reengineering Patterns_"]
[[NDD_OORP_2009]]
Oscar Nierstrasz, St√©phane Ducasse, and Serge Demeyer.
_Object-Oriented Reengineering Patterns_.
Square Bracket Associates.
2009.
ISBN 978-3952334126.


[[bibliography-design]]
=== Software Design and Development

[reftext="_Extreme Programming Explained: Embrace Change_"]
[[B_EPEEC_1999]]
Kent Beck.
_Extreme Programming Explained: Embrace Change_.
Addison-Wesley Professional.
1999.
ISBN 978-0201616415.

[reftext="_Refactoring: Improving the Design of Existing Code_"]
[[F_RITDOEC_1999]]
Martin Fowler.
_Refactoring: Improving the Design of Existing Code_.
Addison-Wesley Professional.
1999.
ISBN 978-0201485677.

[reftext="_Refactoring: Improving the Design of Existing Code_"]
[[F_RITDOEC_2018]]
Martin Fowler.
_Refactoring: Improving the Design of Existing Code_.
Addison-Wesley Professional.
2018.
ISBN 978-0134757599.

[reftext="_Design Patterns: Elements of Reusable Object-Oriented Software_"]
[[GHJV_DPEOROOS_1994]]
Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides.
_Design Patterns: Elements of Reusable Object-Oriented Software_.
Addison-Wesley Professional.
1999.
ISBN 978-0201633610.

[reftext="_Refactoring to Patterns_"]
[[K_RTP_2004]]
Joshua Kerievsky.
_Refactoring to Patterns_.
Addison-Wesley Professional.
2004.
ISBN 978-0321213358.

[reftext="_Grokking Simplicity: Taming Complex Software with Functional Thinking_"]
[[N_GSTCSWFT_2021]]
Eric Normand.
_Grokking Simplicity: Taming Complex Software with Functional Thinking_.
Manning Publications.
2021.
ISBN 978-1617296208.


=== Java and the JVM

[reftext="_The Java Language Specification_"]
[[GJSBB_TJLS_2014]]
James Gosling, Bill Joy, Guy Steele, Gilad Bracha, and Alex Buckley.
_The Java Language Specification, Java SE 8 Edition_.
Addison-Wesley Professional.
2014.
ISBN 978-0133900699.

[reftext="_The Java Virtual Machine Specification_"]
[[L_TJVMS_2014]]
Tim Lindholm, Frank Yellin, Gilad Bracha, and Alex Buckley.
_The Java Virtual Machine Specification, Java SE 8 Edition_.
Addison-Wesley Professional.
2014.
ISBN 978-0133905908.
