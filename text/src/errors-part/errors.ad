[[error-handling]]
[part]
== Error Handling (To be folded in)

You don't have to have programmed computers for long to discover that things go wrong...

...in _so many_ different ways.
In this part we'll look at the ways that software can fail.
We'll see how to write code that is able to cope with failure, and when it can't cope, is able to communicate the ways in which it can go wrong.
In the worked example we'll refactor exception-based error handling in Java into a more functional Kotlin style.

:leveloffset: +1

include::1-errors-intro.ad[]

include::2-error-handling-in-kotlin.ad[]

include::3-errors-refactoring.ad[]

include::4-advanced-errors.ad[]

////

= We Refactor Partial Functions

= We Move IO to the Edge

An example refactoring for moving IO to the edge.

= Advanced Error Handling

== How to Represent Errors

Discussion on using exceptions v sealed classes as our Right

Discussion on errors crossing bounded contexts.

== Recording Errors

Logging and operational events.

== Designing Resilient Systems

Moving actions to the edge, controlling state changes, keeping state in the call stack.

////
