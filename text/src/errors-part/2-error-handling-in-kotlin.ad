= Error Handling in Kotlin

Now that we know the error handling options open to us,
which should we use in our Kotlin projects,
and how do we migrate our Java code?

It depends of course.

In the small,
using nullable types to represent failure is very effective,
provided that you don't need to convey any information
about the reason for failure.

You won't be fired for using exceptions
as your default strategy.
The lack of type checking makes it hard to communicate
what code is subject to what failure though,
which in turn makes it hard to build reliable systems.
Adding insult, you will lose the benefits of referential transparency,
making it harder to fix and refactor
your unreliable system.

Our preference is to return an Either type
from those operations that would have thrown a checked exception in Java,
either because of IO problems,
or because, like `parseInt`,
they cannot give a result for all inputs.
Errors (capital E) are still appropriate for unrecoverable program errors.
They should generally not be caught
and the program should exit,
with systems outside the JVM responsible for restarting it.
RuntimeExceptions are still good for signalling when
we have made an error as programmers -
IndexOutOfBounds and the like.
If we have carefully designed our system
it should be able to survive these issues
and process other inputs that do not run into the same problem.

Which Either type should you choose?
The built-in Kotlin Result type is,
at the time of writing,
a frustrating placeholder which just teases
and gets in the way.

ifdef::todos[]
.Kotlin Result
****

****
endif::[]

There are plenty of others available,
but for this book we will use Result4k,
not coincidentally written by Nat.
Compared to the generic Either type we introduced earlier,
Result4 defines `Result<SuccessType, FailureType>`,
with subtypes Success and Failure
rather than the generic Left and Right.
As it is specialised for representing errors,
Result4k can offer operations such as `onFailure`
and `recover`
that would not make sense on Either.
