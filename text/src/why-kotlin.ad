== Why Kotlin?


At the time of writing, there are no unique frameworks or libraries that are written in Kotlin.  There's no equivalent of Clojure's _xxxx_ library or Scala's _yyyy_ framework.  Kotlin doesn't have a "killer app".  Despite this, Kotlin adoption is growing rapidly. And this is because the language itself offers significant improvements over Java, allows Java programmers to make use of functional programming constructs more easily, but does not require Java programmers to _entirely_ change the way they think about design and software architecture. Kotlin a step beyond Java, while being more conservative than the other two most popular post-Java JVM languages, Scala and Clojure. Above all – and despite the way this sounds, I think this is actually its most innovative attribute –  Kotlin is a deliberately _boring_ language. It's practical. It's designers understand the value of good tool support. They understand the value of interoperating with existing code. Kotlin is a dependable tool for getting things done, especially when you have already done a lot of things in Java and you want to keep using them.


=== How does Kotlin compare to Java?

More concise than Java: expression oriented, when statement, primary constructors, data classes, expression functions

Modern type system: type inference, flow-sensitive typing, Nothing, (and the big selling point) null safety.

Simpler than Java -- fewer special cases that interact in unpredictable ways. No primitive/reference type distinction, no special case for void.

Opt-in reflection -- encourages a type-safe, compositional coding style.

Inline functions: a very controlled form of 

Explicitness: no implicit type coercion, even from smaller range to larger range.  No implicit parameters, like Scala.

Designed from the get-go to be used with a language aware editor (IntelliJ is what most people will use, but there's an Eclipse plugin as well).

Interoperates easily (although not entirely seamlessly) with existing Java code.


=== Differences and _faux amis_

A _faux ami_ is a word in a spoken language that looks similar to a word in another language, but has a significantly different meaning.  In a similar way, Kotlin has syntax that look similar to Java -- sometimes even using the same keywords -- but that have quite different semantics.  We will call attention to these as we come to them, and take some time to explore the differences in some detail.  Feel free to skip any digression if you are comfortable with that aspect of the language.
