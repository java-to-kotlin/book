#!/usr/bin/env bash
set -eo pipefail

kotlin_version=${1:-$(head -n 1 "$(dirname "$0")"/.kotlin-version)}
echo "testing with Kotlin $kotlin_version"

"$(dirname "$0")"/retag-worked-example

clean_log=$(realpath "$(dirname "$0")"/clean-log)

known_failures_dir=$(realpath buildSrc/known-failures/$kotlin_version)
working_dir=$(realpath build/testing-history)
cached_dir=$(realpath build/testing-history-cached)

if [ ! -d "$working_dir" ]
then
  git worktree prune
  mkdir -p "$working_dir"
  (cd ../refactoring-to-kotlin-code && git worktree add --detach "$working_dir")
fi

mkdir -p "$cached_dir"

cd "$working_dir"

rm -f *.log

result=0

for tag in $(git tag -l '*.[0-9]*' | sort -V); do
  msg=$(git show --no-patch --format="%s" "$tag")
  sha=$(git show-ref -s "$tag")
  cached="$cached_dir/$sha-$kotlin_version"

  printf "testing %s ... " "$msg"

  if [ -f "$cached" ]
  then
    echo "CACHED"
  else
    git checkout --detach "$tag" > /dev/null 2>&1

    if ./gradlew -PKOTLIN_VERSION="$kotlin_version" clean test --no-parallel>"$tag.log" 2>&1
    then
      if [ -e "$known_failures_dir/$tag.log" ]
      then
        echo "Expected failure, but it succeeded"
        result=1
      else
        echo "OK"
        rm "$tag.log"
        touch "$cached"
      fi
    else
      # Make the Gradle output stable between runs
      mv "$tag.log" "$tag.orig.log"
      "$clean_log" "$tag.orig.log" "$working_dir" > "$tag.log"

      if diff --side-by-side "$tag.log" "$known_failures_dir/$tag.log"
      then
        echo "Known failure"
        rm "$tag.log"
        rm "$tag.orig.log"
        touch "$cached"
      else
        echo "To record as a known failure:"
        echo "    cp $(realpath "$tag.log") $known_failures_dir/"
        result=1
      fi
    fi
  fi
done

if [ $result != 0 ]
then
  echo '*** FAILED ***'
  find . -type f -name "*.log" -not -name '*.orig.log' -exec basename {} .log \; | sort -V
else
  echo '*** PASSED ***'
fi

exit $result
