#!/usr/bin/env bash
set -eo pipefail

"$(dirname "$0")"/retag-worked-example

known_failures_dir=$(realpath buildSrc/known-failures)
working_dir=$(realpath build/testing-history)
cached_dir=$(realpath build/testing-history-cached)

if [ ! -d "$working_dir" ]
then
  mkdir -p "$working_dir"
  (cd ../refactoring-to-kotlin-code && git worktree add --detach "$working_dir")
fi

mkdir -p "$cached_dir"

cd "$working_dir"

result=0

for tag in $(git tag -l '*.[0-9]*' | sort -V); do
  msg=$(git show --no-patch --format="%s" "$tag")
  sha=$(git show-ref -s "$tag")
  cached="$cached_dir/$sha"

  printf "testing %s ... " "$msg"

  if [ -f "$cached" ]
  then
    echo "CACHED"
  else
    git checkout --detach "$tag" > /dev/null 2>&1

    if ./gradlew clean test --no-parallel>"$tag.log" 2>&1
    then
      if [ -e "$known_failures_dir/$tag.log" ]
      then
        echo "Expected failure, but it succeeded"
        result=1
      else
        echo "OK"
        rm "$tag.log"
        touch "$cached"
      fi
    else
      # Delete the last two lines of Gradle output because they are not stable between runs
      tail -r "$tag.log" | \
        sed -e '1,2d' | \
        sed -Ee 's/ ((FROM-CACHE)|(NO-SOURCE)|(UP-TO-DATE)|((FAILED)))$//' | \
        sed -Ee "s|$working_dir/||" | \
        sort | uniq | \
        tail -r > "$tag.log.tmp"
      mv "$tag.log.tmp" "$tag.log"

      if diff "$tag.log" "$known_failures_dir/$tag.log"
      then
        echo "Known failure"
        rm "$tag.log"
        touch "$cached"
      else
        echo "To record as a known failure:"
        echo "    cp $(realpath "$tag.log") $known_failures_dir"
        result=1
      fi
    fi
  fi
done

if [ $result != 0 ]
then
  echo '*** FAILED ***'
fi

exit $result
